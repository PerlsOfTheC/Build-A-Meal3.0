/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { isArray, isFunction, getProperty } from '../utils/utils';
var FirstOrDefaultPipe = /** @class */ (function () {
    function FirstOrDefaultPipe() {
    }
    /**
     * @param {?} input
     * @param {?} predicate
     * @param {?=} defaultValue
     * @return {?}
     */
    FirstOrDefaultPipe.find = /**
     * @param {?} input
     * @param {?} predicate
     * @param {?=} defaultValue
     * @return {?}
     */
    function (input, predicate, defaultValue) {
        var /** @type {?} */ found = false;
        var /** @type {?} */ result;
        var /** @type {?} */ i = -1;
        while (!found && ++i < input.length) {
            found = predicate(input[i], i, input);
        }
        if (found) {
            result = input[i];
        }
        if (typeof result === 'undefined' && typeof defaultValue !== 'undefined') {
            result = defaultValue;
        }
        return result;
    };
    /**
     * @param {?} input
     * @param {?} predicate
     * @param {?=} defaultValue
     * @return {?}
     */
    FirstOrDefaultPipe.prototype.transform = /**
     * @param {?} input
     * @param {?} predicate
     * @param {?=} defaultValue
     * @return {?}
     */
    function (input, predicate, defaultValue) {
        if (!isArray(input)) {
            return input;
        }
        if (isFunction(predicate)) {
            return FirstOrDefaultPipe.find(input, /** @type {?} */ (predicate), defaultValue);
        }
        else if (isArray(predicate)) {
            var _a = tslib_1.__read(/** @type {?} */ (predicate), 2), key_1 = _a[0], value_1 = _a[1];
            return FirstOrDefaultPipe.find(input, function (item) { return getProperty(item, key_1) === value_1; }, defaultValue);
        }
        else if (predicate) {
            return FirstOrDefaultPipe.find(input, function (item) { return item === /** @type {?} */ (predicate); }, defaultValue);
        }
        else {
            return input;
        }
    };
    FirstOrDefaultPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'firstOrDefault'
                },] },
    ];
    return FirstOrDefaultPipe;
}());
export { FirstOrDefaultPipe };
function FirstOrDefaultPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    FirstOrDefaultPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    FirstOrDefaultPipe.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlyc3Qtb3ItZGVmYXVsdC5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1waXBlcy8iLCJzb3VyY2VzIjpbImFycmF5L2ZpcnN0LW9yLWRlZmF1bHQucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWtCLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBdUIsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7Ozs7OztJQVF0RSx1QkFBSTs7Ozs7O2NBQ2pCLEtBQVksRUFDWixTQUE4QixFQUM5QixZQUFrQjtRQUdsQixxQkFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ2xCLHFCQUFJLE1BQVcsQ0FBQztRQUNoQixxQkFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFWCxPQUFPLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNwQyxLQUFLLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDdkM7UUFFRCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ1YsTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNuQjtRQUVELEVBQUUsQ0FBQyxDQUFDLE9BQU8sTUFBTSxLQUFLLFdBQVcsSUFBSSxPQUFPLFlBQVksS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ3pFLE1BQU0sR0FBRyxZQUFZLENBQUM7U0FDdkI7UUFFRCxNQUFNLENBQUMsTUFBTSxDQUFDOzs7Ozs7OztJQUdoQixzQ0FBUzs7Ozs7O0lBQVQsVUFDRSxLQUFVLEVBQ1YsU0FBMkMsRUFDM0MsWUFBa0I7UUFHbEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLE1BQU0sQ0FBQyxLQUFLLENBQUE7U0FDYjtRQUVELEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDMUIsTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxLQUFLLG9CQUF1QixTQUFTLEdBQUUsWUFBWSxDQUFDLENBQUM7U0FDckY7UUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1QiwwREFBTyxhQUFHLEVBQUUsZUFBSyxDQUF5QjtZQUMxQyxNQUFNLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxVQUFDLElBQVMsSUFBSyxPQUFBLFdBQVcsQ0FBQyxJQUFJLEVBQUUsS0FBRyxDQUFDLEtBQUssT0FBSyxFQUFoQyxDQUFnQyxFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ3RHO1FBQ0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDbkIsTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsVUFBQyxJQUFJLElBQUssT0FBQSxJQUFJLHVCQUFVLFNBQVMsQ0FBQSxFQUF2QixDQUF1QixFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQ3hGO1FBQ0QsSUFBSSxDQUFDLENBQUM7WUFDSixNQUFNLENBQUMsS0FBSyxDQUFDO1NBQ2Q7S0FDRjs7Z0JBckRGLElBQUksU0FBQztvQkFDSixJQUFJLEVBQUUsZ0JBQWdCO2lCQUN2Qjs7NkJBTkQ7O1NBT2Esa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSAgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgaXNBcnJheSwgaXNGdW5jdGlvbiwgZ2V0UHJvcGVydHksIENvbGxlY3Rpb25QcmVkaWNhdGUgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdmaXJzdE9yRGVmYXVsdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIEZpcnN0T3JEZWZhdWx0UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIFxyXG4gIHByaXZhdGUgc3RhdGljIGZpbmQgKFxyXG4gICAgaW5wdXQ6IGFueVtdLCBcclxuICAgIHByZWRpY2F0ZTogQ29sbGVjdGlvblByZWRpY2F0ZSxcclxuICAgIGRlZmF1bHRWYWx1ZT86IGFueVxyXG4gICk6IGFueSB7XHJcbiAgICBcclxuICAgIGxldCBmb3VuZCA9IGZhbHNlO1xyXG4gICAgbGV0IHJlc3VsdDogYW55O1xyXG4gICAgbGV0IGkgPSAtMTtcclxuICAgIFxyXG4gICAgd2hpbGUgKCFmb3VuZCAmJiArK2kgPCBpbnB1dC5sZW5ndGgpIHtcclxuICAgICAgZm91bmQgPSBwcmVkaWNhdGUoaW5wdXRbaV0sIGksIGlucHV0KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKGZvdW5kKSB7XHJcbiAgICAgIHJlc3VsdCA9IGlucHV0W2ldO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRlZmF1bHRWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgcmVzdWx0ID0gZGVmYXVsdFZhbHVlO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuICBcclxuICB0cmFuc2Zvcm0gKFxyXG4gICAgaW5wdXQ6IGFueSxcclxuICAgIHByZWRpY2F0ZTogQ29sbGVjdGlvblByZWRpY2F0ZXxzdHJpbmdbXXxhbnksXHJcbiAgICBkZWZhdWx0VmFsdWU/OiBhbnlcclxuICApOiBhbnkge1xyXG4gICAgXHJcbiAgICBpZiAoIWlzQXJyYXkoaW5wdXQpKSB7XHJcbiAgICAgIHJldHVybiBpbnB1dFxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAoaXNGdW5jdGlvbihwcmVkaWNhdGUpKSB7XHJcbiAgICAgIHJldHVybiBGaXJzdE9yRGVmYXVsdFBpcGUuZmluZChpbnB1dCwgPENvbGxlY3Rpb25QcmVkaWNhdGU+cHJlZGljYXRlLCBkZWZhdWx0VmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaXNBcnJheShwcmVkaWNhdGUpKSB7XHJcbiAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IDxzdHJpbmdbXT4gcHJlZGljYXRlO1xyXG4gICAgICByZXR1cm4gRmlyc3RPckRlZmF1bHRQaXBlLmZpbmQoaW5wdXQsIChpdGVtOiBhbnkpID0+IGdldFByb3BlcnR5KGl0ZW0sIGtleSkgPT09IHZhbHVlLCBkZWZhdWx0VmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAocHJlZGljYXRlKSB7XHJcbiAgICAgIHJldHVybiBGaXJzdE9yRGVmYXVsdFBpcGUuZmluZChpbnB1dCwgKGl0ZW0pID0+IGl0ZW0gPT09IDxhbnk+cHJlZGljYXRlLCBkZWZhdWx0VmFsdWUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJldHVybiBpbnB1dDtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=