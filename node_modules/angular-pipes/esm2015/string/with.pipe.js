/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
import { isString, isNull } from '../utils/utils';
export class WithPipe {
    /**
     * @param {?} input
     * @param {?=} start
     * @param {?=} ends
     * @param {?=} csensitive
     * @return {?}
     */
    transform(input, start = null, ends = null, csensitive = false) {
        if (!isString(input) || (isNull(start) && isNull(ends)) || (start == '') || (ends == '')) {
            return input;
        }
        input = (csensitive) ? input : input.toLowerCase();
        if (!isNull(start) && !isNull(ends)) {
            let /** @type {?} */ a = !input.indexOf((csensitive) ? start : start.toLowerCase());
            let /** @type {?} */ b = input.indexOf((csensitive) ? ends : ends.toLowerCase(), (input.length - ends.length)) !== -1;
            if (a == true && b == true) {
                return true;
            }
            else {
                return false;
            }
        }
        if (!isNull(start)) {
            return !input.indexOf((csensitive) ? start : start.toLowerCase());
        }
        if (!isNull(ends)) {
            let /** @type {?} */ position = input.length - ends.length;
            return input.indexOf((csensitive) ? ends : ends.toLowerCase(), position) !== -1;
        }
    }
}
WithPipe.decorators = [
    { type: Pipe, args: [{ name: 'with' },] },
];
function WithPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    WithPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    WithPipe.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l0aC5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1waXBlcy8iLCJzb3VyY2VzIjpbInN0cmluZy93aXRoLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxJQUFJLEVBQWdCLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBQyxRQUFRLEVBQUUsTUFBTSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFHaEQsTUFBTTs7Ozs7Ozs7SUFFSixTQUFTLENBQUMsS0FBYSxFQUFFLFFBQXFCLElBQUksRUFBRSxPQUFvQixJQUFJLEVBQUUsYUFBc0IsS0FBSztRQUV2RyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekYsTUFBTSxDQUFDLEtBQUssQ0FBQztTQUNkO1FBRUQsS0FBSyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRW5ELEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQyxxQkFBSSxDQUFDLEdBQVksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7WUFDNUUscUJBQUksQ0FBQyxHQUFZLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBRTlHLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLE1BQU0sQ0FBQyxJQUFJLENBQUE7YUFDWjtZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLE1BQU0sQ0FBQyxLQUFLLENBQUM7YUFDZDtTQUNGO1FBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25CLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztTQUNuRTtRQUVELEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsQixxQkFBSSxRQUFRLEdBQVEsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBRS9DLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1NBQ2pGO0tBQ0Y7OztZQS9CRixJQUFJLFNBQUMsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQaXBlLCBQaXBlVHJhbnNmb3JtfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtpc1N0cmluZywgaXNOdWxsfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5AUGlwZSh7bmFtZTogJ3dpdGgnfSlcclxuZXhwb3J0IGNsYXNzIFdpdGhQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtKGlucHV0OiBzdHJpbmcsIHN0YXJ0OiBzdHJpbmd8bnVsbCA9IG51bGwsIGVuZHM6IHN0cmluZ3xudWxsID0gbnVsbCwgY3NlbnNpdGl2ZTogYm9vbGVhbiA9IGZhbHNlKTogYW55IHtcclxuICAgIFxyXG4gICAgaWYgKCFpc1N0cmluZyhpbnB1dCkgfHwgKGlzTnVsbChzdGFydCkgJiYgaXNOdWxsKGVuZHMpKSB8fCAoc3RhcnQgPT0gJycpIHx8IChlbmRzID09ICcnKSkge1xyXG4gICAgICByZXR1cm4gaW5wdXQ7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlucHV0ID0gKGNzZW5zaXRpdmUpID8gaW5wdXQgOiBpbnB1dC50b0xvd2VyQ2FzZSgpO1xyXG4gICAgXHJcbiAgICBpZiAoIWlzTnVsbChzdGFydCkgJiYgIWlzTnVsbChlbmRzKSkge1xyXG4gICAgICBsZXQgYTogYm9vbGVhbiA9ICFpbnB1dC5pbmRleE9mKChjc2Vuc2l0aXZlKSA/IHN0YXJ0IDogc3RhcnQudG9Mb3dlckNhc2UoKSk7XHJcbiAgICAgIGxldCBiOiBib29sZWFuID0gaW5wdXQuaW5kZXhPZigoY3NlbnNpdGl2ZSkgPyBlbmRzIDogZW5kcy50b0xvd2VyQ2FzZSgpLCAoaW5wdXQubGVuZ3RoIC0gZW5kcy5sZW5ndGgpKSAhPT0gLTE7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoYSA9PSB0cnVlICYmIGIgPT0gdHJ1ZSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmICghaXNOdWxsKHN0YXJ0KSkge1xyXG4gICAgICByZXR1cm4gIWlucHV0LmluZGV4T2YoKGNzZW5zaXRpdmUpID8gc3RhcnQgOiBzdGFydC50b0xvd2VyQ2FzZSgpKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKCFpc051bGwoZW5kcykpIHtcclxuICAgICAgbGV0IHBvc2l0aW9uOiBhbnkgPSBpbnB1dC5sZW5ndGggLSBlbmRzLmxlbmd0aDtcclxuICAgICAgXHJcbiAgICAgIHJldHVybiBpbnB1dC5pbmRleE9mKChjc2Vuc2l0aXZlKSA/IGVuZHMgOiBlbmRzLnRvTG93ZXJDYXNlKCksIHBvc2l0aW9uKSAhPT0gLTE7XHJcbiAgICB9XHJcbiAgfVxyXG59Il19