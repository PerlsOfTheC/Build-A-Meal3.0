/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
var IsGreaterPipe = /** @class */ (function () {
    function IsGreaterPipe() {
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    IsGreaterPipe.prototype.transform = /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    function (first, second) {
        return first > second;
    };
    IsGreaterPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'greater'
                },] },
    ];
    return IsGreaterPipe;
}());
export { IsGreaterPipe };
function IsGreaterPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsGreaterPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsGreaterPipe.ctorParameters;
}
var IsGreaterOrEqualPipe = /** @class */ (function () {
    function IsGreaterOrEqualPipe() {
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    IsGreaterOrEqualPipe.prototype.transform = /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    function (first, second) {
        return first >= second;
    };
    IsGreaterOrEqualPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'greaterOrEqual'
                },] },
    ];
    return IsGreaterOrEqualPipe;
}());
export { IsGreaterOrEqualPipe };
function IsGreaterOrEqualPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsGreaterOrEqualPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsGreaterOrEqualPipe.ctorParameters;
}
var IsLessPipe = /** @class */ (function () {
    function IsLessPipe() {
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    IsLessPipe.prototype.transform = /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    function (first, second) {
        return first < second;
    };
    IsLessPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'less'
                },] },
    ];
    return IsLessPipe;
}());
export { IsLessPipe };
function IsLessPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsLessPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsLessPipe.ctorParameters;
}
var IsLessOrEqualPipe = /** @class */ (function () {
    function IsLessOrEqualPipe() {
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    IsLessOrEqualPipe.prototype.transform = /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    function (first, second) {
        return first <= second;
    };
    IsLessOrEqualPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'lessOrEqual'
                },] },
    ];
    return IsLessOrEqualPipe;
}());
export { IsLessOrEqualPipe };
function IsLessOrEqualPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsLessOrEqualPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsLessOrEqualPipe.ctorParameters;
}
var IsEqualPipe = /** @class */ (function () {
    function IsEqualPipe() {
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    IsEqualPipe.prototype.transform = /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    function (first, second) {
        return first == second;
    };
    IsEqualPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'equal'
                },] },
    ];
    return IsEqualPipe;
}());
export { IsEqualPipe };
function IsEqualPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsEqualPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsEqualPipe.ctorParameters;
}
var IsNotEqualPipe = /** @class */ (function () {
    function IsNotEqualPipe() {
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    IsNotEqualPipe.prototype.transform = /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    function (first, second) {
        return first != second;
    };
    IsNotEqualPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'notEqual'
                },] },
    ];
    return IsNotEqualPipe;
}());
export { IsNotEqualPipe };
function IsNotEqualPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsNotEqualPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsNotEqualPipe.ctorParameters;
}
var IsIdenticalPipe = /** @class */ (function () {
    function IsIdenticalPipe() {
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    IsIdenticalPipe.prototype.transform = /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    function (first, second) {
        return first === second;
    };
    IsIdenticalPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'identical'
                },] },
    ];
    return IsIdenticalPipe;
}());
export { IsIdenticalPipe };
function IsIdenticalPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsIdenticalPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsIdenticalPipe.ctorParameters;
}
var IsNotIdenticalPipe = /** @class */ (function () {
    function IsNotIdenticalPipe() {
    }
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    IsNotIdenticalPipe.prototype.transform = /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    function (first, second) {
        return first !== second;
    };
    IsNotIdenticalPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'notIdentical'
                },] },
    ];
    return IsNotIdenticalPipe;
}());
export { IsNotIdenticalPipe };
function IsNotIdenticalPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsNotIdenticalPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsNotIdenticalPipe.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9ucy5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1waXBlcy8iLCJzb3VyY2VzIjpbImJvb2xlYW4vY29uZGl0aW9ucy5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFrQixNQUFNLGVBQWUsQ0FBQzs7Ozs7Ozs7O0lBUW5ELGlDQUFTOzs7OztJQUFULFVBQVcsS0FBVSxFQUFFLE1BQVc7UUFFaEMsTUFBTSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUM7S0FDdkI7O2dCQVJGLElBQUksU0FBQztvQkFDSixJQUFJLEVBQUUsU0FBUztpQkFDaEI7O3dCQUxEOztTQU1hLGFBQWE7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWF4Qix3Q0FBUzs7Ozs7SUFBVCxVQUFXLEtBQVUsRUFBRSxNQUFXO1FBRWhDLE1BQU0sQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDO0tBQ3hCOztnQkFSRixJQUFJLFNBQUM7b0JBQ0osSUFBSSxFQUFFLGdCQUFnQjtpQkFDdkI7OytCQWhCRDs7U0FpQmEsb0JBQW9COzs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFhL0IsOEJBQVM7Ozs7O0lBQVQsVUFBVyxLQUFVLEVBQUUsTUFBVztRQUVoQyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQztLQUN2Qjs7Z0JBUkYsSUFBSSxTQUFDO29CQUNKLElBQUksRUFBRSxNQUFNO2lCQUNiOztxQkEzQkQ7O1NBNEJhLFVBQVU7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWFyQixxQ0FBUzs7Ozs7SUFBVCxVQUFXLEtBQVUsRUFBRSxNQUFXO1FBRWhDLE1BQU0sQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDO0tBQ3hCOztnQkFSRixJQUFJLFNBQUM7b0JBQ0osSUFBSSxFQUFFLGFBQWE7aUJBQ3BCOzs0QkF0Q0Q7O1NBdUNhLGlCQUFpQjs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBYTVCLCtCQUFTOzs7OztJQUFULFVBQVcsS0FBVSxFQUFFLE1BQVc7UUFFaEMsTUFBTSxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUM7S0FDeEI7O2dCQVJGLElBQUksU0FBQztvQkFDSixJQUFJLEVBQUUsT0FBTztpQkFDZDs7c0JBakREOztTQWtEYSxXQUFXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFhdEIsa0NBQVM7Ozs7O0lBQVQsVUFBVyxLQUFVLEVBQUUsTUFBVztRQUVoQyxNQUFNLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQztLQUN4Qjs7Z0JBUkYsSUFBSSxTQUFDO29CQUNKLElBQUksRUFBRSxVQUFVO2lCQUNqQjs7eUJBNUREOztTQTZEYSxjQUFjOzs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFhekIsbUNBQVM7Ozs7O0lBQVQsVUFBVyxLQUFVLEVBQUUsTUFBVztRQUVoQyxNQUFNLENBQUMsS0FBSyxLQUFLLE1BQU0sQ0FBQztLQUN6Qjs7Z0JBUkYsSUFBSSxTQUFDO29CQUNKLElBQUksRUFBRSxXQUFXO2lCQUNsQjs7MEJBdkVEOztTQXdFYSxlQUFlOzs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFhMUIsc0NBQVM7Ozs7O0lBQVQsVUFBVyxLQUFVLEVBQUUsTUFBVztRQUVoQyxNQUFNLENBQUMsS0FBSyxLQUFLLE1BQU0sQ0FBQztLQUN6Qjs7Z0JBUkYsSUFBSSxTQUFDO29CQUNKLElBQUksRUFBRSxjQUFjO2lCQUNyQjs7NkJBbEZEOztTQW1GYSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtICB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnZ3JlYXRlcidcclxufSlcclxuZXhwb3J0IGNsYXNzIElzR3JlYXRlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKGZpcnN0OiBhbnksIHNlY29uZDogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiBmaXJzdCA+IHNlY29uZDtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnZ3JlYXRlck9yRXF1YWwnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc0dyZWF0ZXJPckVxdWFsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIFxyXG4gIHRyYW5zZm9ybSAoZmlyc3Q6IGFueSwgc2Vjb25kOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGZpcnN0ID49IHNlY29uZDtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnbGVzcydcclxufSlcclxuZXhwb3J0IGNsYXNzIElzTGVzc1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKGZpcnN0OiBhbnksIHNlY29uZDogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiBmaXJzdCA8IHNlY29uZDtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnbGVzc09yRXF1YWwnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc0xlc3NPckVxdWFsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIFxyXG4gIHRyYW5zZm9ybSAoZmlyc3Q6IGFueSwgc2Vjb25kOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGZpcnN0IDw9IHNlY29uZDtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnZXF1YWwnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc0VxdWFsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIFxyXG4gIHRyYW5zZm9ybSAoZmlyc3Q6IGFueSwgc2Vjb25kOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGZpcnN0ID09IHNlY29uZDtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnbm90RXF1YWwnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc05vdEVxdWFsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIFxyXG4gIHRyYW5zZm9ybSAoZmlyc3Q6IGFueSwgc2Vjb25kOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGZpcnN0ICE9IHNlY29uZDtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaWRlbnRpY2FsJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNJZGVudGljYWxQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtIChmaXJzdDogYW55LCBzZWNvbmQ6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgXHJcbiAgICByZXR1cm4gZmlyc3QgPT09IHNlY29uZDtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnbm90SWRlbnRpY2FsJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNOb3RJZGVudGljYWxQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtIChmaXJzdDogYW55LCBzZWNvbmQ6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgXHJcbiAgICByZXR1cm4gZmlyc3QgIT09IHNlY29uZDtcclxuICB9XHJcbn1cclxuXHJcbiJdfQ==