/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { isArray } from '../utils/utils';
var OrderByPipe = /** @class */ (function () {
    function OrderByPipe() {
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    OrderByPipe._orderBy = /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        if (a instanceof Date && b instanceof Date) {
            return (a < b) ? -1 : (a > b) ? 1 : 0;
        }
        var /** @type {?} */ floatA = parseFloat(a);
        var /** @type {?} */ floatB = parseFloat(b);
        if (typeof a === 'string' && typeof b === 'string' && (isNaN(floatA) || isNaN(floatB))) {
            var /** @type {?} */ lowerA = a.toLowerCase();
            var /** @type {?} */ lowerB = b.toLowerCase();
            return (lowerA < lowerB) ? -1 : (lowerA > lowerB) ? 1 : 0;
        }
        return (floatA < floatB) ? -1 : (floatA > floatB) ? 1 : 0;
    };
    /**
     * @param {?} input
     * @param {?=} config
     * @return {?}
     */
    OrderByPipe.prototype.transform = /**
     * @param {?} input
     * @param {?=} config
     * @return {?}
     */
    function (input, config) {
        if (config === void 0) { config = '+'; }
        if (!isArray(input)) {
            return input;
        }
        var /** @type {?} */ configIsArray = isArray(config);
        // If config === 'param' OR ['param']
        if (!configIsArray || (configIsArray && config.length === 1)) {
            var /** @type {?} */ propertyToCheck = configIsArray ? config[0] : config;
            var /** @type {?} */ first = propertyToCheck.substr(0, 1);
            var /** @type {?} */ desc_1 = (first === '-'); // First character is '-'
            // Basic array (if only + or - is present)
            if (!propertyToCheck || propertyToCheck === '-' || propertyToCheck === '+') {
                return tslib_1.__spread(input).sort(function (a, b) {
                    var /** @type {?} */ comparator = OrderByPipe._orderBy(a, b);
                    return desc_1 ? -comparator : comparator;
                });
            }
            else {
                // If contains + or -, substring the property
                var /** @type {?} */ property_1 = (first === '+' || desc_1) ? propertyToCheck.substr(1) : propertyToCheck;
                return tslib_1.__spread(input).sort(function (a, b) {
                    var /** @type {?} */ comparator = OrderByPipe._orderBy(a[property_1], b[property_1]);
                    return desc_1 ? -comparator : comparator;
                });
            }
        }
        else {
            // Config is an array of property
            return tslib_1.__spread(input).sort(function (a, b) {
                for (var /** @type {?} */ i = 0; i < config.length; ++i) {
                    var /** @type {?} */ first = config[i].substr(0, 1);
                    var /** @type {?} */ desc = (first === '-');
                    var /** @type {?} */ property = (first === '+' || desc) ? config[i].substr(1) : config[i];
                    var /** @type {?} */ comparator = OrderByPipe._orderBy(a[property], b[property]);
                    var /** @type {?} */ comparison = desc ? -comparator : comparator;
                    if (comparison !== 0) {
                        return comparison;
                    }
                }
                return 0;
            });
        }
    };
    OrderByPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'orderBy'
                },] },
    ];
    return OrderByPipe;
}());
export { OrderByPipe };
function OrderByPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    OrderByPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    OrderByPipe.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,