/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
import { isNull, isNil, isUndefined, isFunction, isArray, isString, isObject, isNumber } from '../utils/utils';
export class IsNullPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return isNull(value);
    }
}
IsNullPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isNull'
            },] },
];
function IsNullPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsNullPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsNullPipe.ctorParameters;
}
export class IsUndefinedPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return isUndefined(value);
    }
}
IsUndefinedPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isUndefined'
            },] },
];
function IsUndefinedPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsUndefinedPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsUndefinedPipe.ctorParameters;
}
export class IsNilPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return isNil(value);
    }
}
IsNilPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isNil'
            },] },
];
function IsNilPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsNilPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsNilPipe.ctorParameters;
}
export class IsFunctionPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return isFunction(value);
    }
}
IsFunctionPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isFunction'
            },] },
];
function IsFunctionPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsFunctionPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsFunctionPipe.ctorParameters;
}
export class IsNumberPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return isNumber(value);
    }
}
IsNumberPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isNumber'
            },] },
];
function IsNumberPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsNumberPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsNumberPipe.ctorParameters;
}
export class IsStringPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return isString(value);
    }
}
IsStringPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isString'
            },] },
];
function IsStringPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsStringPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsStringPipe.ctorParameters;
}
export class IsArrayPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return isArray(value);
    }
}
IsArrayPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isArray'
            },] },
];
function IsArrayPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsArrayPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsArrayPipe.ctorParameters;
}
export class IsObjectPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return isObject(value);
    }
}
IsObjectPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isObject'
            },] },
];
function IsObjectPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsObjectPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsObjectPipe.ctorParameters;
}
export class IsDefinedPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return !isUndefined(value);
    }
}
IsDefinedPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isDefined'
            },] },
];
function IsDefinedPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsDefinedPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsDefinedPipe.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItcGlwZXMvIiwic291cmNlcyI6WyJib29sZWFuL3R5cGVzLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWtCLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFDTCxNQUFNLEVBQ04sS0FBSyxFQUNMLFdBQVcsRUFDWCxVQUFVLEVBQ1YsT0FBTyxFQUNQLFFBQVEsRUFDUixRQUFRLEVBQ1IsUUFBUSxFQUNULE1BQU0sZ0JBQWdCLENBQUM7QUFLeEIsTUFBTTs7Ozs7SUFFSixTQUFTLENBQUUsS0FBVTtRQUVuQixNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3RCOzs7WUFSRixJQUFJLFNBQUM7Z0JBQ0osSUFBSSxFQUFFLFFBQVE7YUFDZjs7Ozs7Ozs7Ozs7QUFZRCxNQUFNOzs7OztJQUVKLFNBQVMsQ0FBRSxLQUFVO1FBRW5CLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDM0I7OztZQVJGLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsYUFBYTthQUNwQjs7Ozs7Ozs7Ozs7QUFZRCxNQUFNOzs7OztJQUVKLFNBQVMsQ0FBRSxLQUFVO1FBRW5CLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDckI7OztZQVJGLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsT0FBTzthQUNkOzs7Ozs7Ozs7OztBQVlELE1BQU07Ozs7O0lBRUosU0FBUyxDQUFFLEtBQVU7UUFFbkIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUMxQjs7O1lBUkYsSUFBSSxTQUFDO2dCQUNKLElBQUksRUFBRSxZQUFZO2FBQ25COzs7Ozs7Ozs7OztBQVlELE1BQU07Ozs7O0lBRUosU0FBUyxDQUFFLEtBQVU7UUFFbkIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUN4Qjs7O1lBUkYsSUFBSSxTQUFDO2dCQUNKLElBQUksRUFBRSxVQUFVO2FBQ2pCOzs7Ozs7Ozs7OztBQVlELE1BQU07Ozs7O0lBRUosU0FBUyxDQUFFLEtBQVU7UUFFbkIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUN4Qjs7O1lBUkYsSUFBSSxTQUFDO2dCQUNKLElBQUksRUFBRSxVQUFVO2FBQ2pCOzs7Ozs7Ozs7OztBQWFELE1BQU07Ozs7O0lBRUosU0FBUyxDQUFFLEtBQVU7UUFFbkIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUN2Qjs7O1lBUkYsSUFBSSxTQUFDO2dCQUNKLElBQUksRUFBRSxTQUFTO2FBQ2hCOzs7Ozs7Ozs7OztBQVlELE1BQU07Ozs7O0lBRUosU0FBUyxDQUFFLEtBQVU7UUFFbkIsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUN4Qjs7O1lBUkYsSUFBSSxTQUFDO2dCQUNKLElBQUksRUFBRSxVQUFVO2FBQ2pCOzs7Ozs7Ozs7OztBQWFELE1BQU07Ozs7O0lBRUosU0FBUyxDQUFFLEtBQVU7UUFFbkIsTUFBTSxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzVCOzs7WUFSRixJQUFJLFNBQUM7Z0JBQ0osSUFBSSxFQUFFLFdBQVc7YUFDbEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtICB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1xyXG4gIGlzTnVsbCxcclxuICBpc05pbCxcclxuICBpc1VuZGVmaW5lZCwgXHJcbiAgaXNGdW5jdGlvbixcclxuICBpc0FycmF5LFxyXG4gIGlzU3RyaW5nLFxyXG4gIGlzT2JqZWN0LFxyXG4gIGlzTnVtYmVyIFxyXG59IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaXNOdWxsJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNOdWxsUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIFxyXG4gIHRyYW5zZm9ybSAodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgXHJcbiAgICByZXR1cm4gaXNOdWxsKHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaXNVbmRlZmluZWQnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc1VuZGVmaW5lZFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGlzVW5kZWZpbmVkKHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaXNOaWwnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc05pbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGlzTmlsKHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaXNGdW5jdGlvbidcclxufSlcclxuZXhwb3J0IGNsYXNzIElzRnVuY3Rpb25QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtICh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaXNOdW1iZXInXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc051bWJlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICBuYW1lOiAnaXNTdHJpbmcnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc1N0cmluZ1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKTtcclxuICB9XHJcbn1cclxuXHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2lzQXJyYXknXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc0FycmF5UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIFxyXG4gIHRyYW5zZm9ybSAodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgXHJcbiAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSk7XHJcbiAgfVxyXG59XHJcblxyXG5AUGlwZSh7XHJcbiAgbmFtZTogJ2lzT2JqZWN0J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNPYmplY3RQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtICh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiBpc09iamVjdCh2YWx1ZSk7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdpc0RlZmluZWQnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc0RlZmluZWRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtICh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiAhaXNVbmRlZmluZWQodmFsdWUpO1xyXG4gIH1cclxufVxyXG5cclxuIl19