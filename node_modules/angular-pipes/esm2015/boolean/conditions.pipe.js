/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
export class IsGreaterPipe {
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    transform(first, second) {
        return first > second;
    }
}
IsGreaterPipe.decorators = [
    { type: Pipe, args: [{
                name: 'greater'
            },] },
];
function IsGreaterPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsGreaterPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsGreaterPipe.ctorParameters;
}
export class IsGreaterOrEqualPipe {
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    transform(first, second) {
        return first >= second;
    }
}
IsGreaterOrEqualPipe.decorators = [
    { type: Pipe, args: [{
                name: 'greaterOrEqual'
            },] },
];
function IsGreaterOrEqualPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsGreaterOrEqualPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsGreaterOrEqualPipe.ctorParameters;
}
export class IsLessPipe {
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    transform(first, second) {
        return first < second;
    }
}
IsLessPipe.decorators = [
    { type: Pipe, args: [{
                name: 'less'
            },] },
];
function IsLessPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsLessPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsLessPipe.ctorParameters;
}
export class IsLessOrEqualPipe {
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    transform(first, second) {
        return first <= second;
    }
}
IsLessOrEqualPipe.decorators = [
    { type: Pipe, args: [{
                name: 'lessOrEqual'
            },] },
];
function IsLessOrEqualPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsLessOrEqualPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsLessOrEqualPipe.ctorParameters;
}
export class IsEqualPipe {
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    transform(first, second) {
        return first == second;
    }
}
IsEqualPipe.decorators = [
    { type: Pipe, args: [{
                name: 'equal'
            },] },
];
function IsEqualPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsEqualPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsEqualPipe.ctorParameters;
}
export class IsNotEqualPipe {
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    transform(first, second) {
        return first != second;
    }
}
IsNotEqualPipe.decorators = [
    { type: Pipe, args: [{
                name: 'notEqual'
            },] },
];
function IsNotEqualPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsNotEqualPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsNotEqualPipe.ctorParameters;
}
export class IsIdenticalPipe {
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    transform(first, second) {
        return first === second;
    }
}
IsIdenticalPipe.decorators = [
    { type: Pipe, args: [{
                name: 'identical'
            },] },
];
function IsIdenticalPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsIdenticalPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsIdenticalPipe.ctorParameters;
}
export class IsNotIdenticalPipe {
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    transform(first, second) {
        return first !== second;
    }
}
IsNotIdenticalPipe.decorators = [
    { type: Pipe, args: [{
                name: 'notIdentical'
            },] },
];
function IsNotIdenticalPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    IsNotIdenticalPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    IsNotIdenticalPipe.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9ucy5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1waXBlcy8iLCJzb3VyY2VzIjpbImJvb2xlYW4vY29uZGl0aW9ucy5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFrQixNQUFNLGVBQWUsQ0FBQztBQU1yRCxNQUFNOzs7Ozs7SUFFSixTQUFTLENBQUUsS0FBVSxFQUFFLE1BQVc7UUFFaEMsTUFBTSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUM7S0FDdkI7OztZQVJGLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsU0FBUzthQUNoQjs7Ozs7Ozs7Ozs7QUFZRCxNQUFNOzs7Ozs7SUFFSixTQUFTLENBQUUsS0FBVSxFQUFFLE1BQVc7UUFFaEMsTUFBTSxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUM7S0FDeEI7OztZQVJGLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsZ0JBQWdCO2FBQ3ZCOzs7Ozs7Ozs7OztBQVlELE1BQU07Ozs7OztJQUVKLFNBQVMsQ0FBRSxLQUFVLEVBQUUsTUFBVztRQUVoQyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQztLQUN2Qjs7O1lBUkYsSUFBSSxTQUFDO2dCQUNKLElBQUksRUFBRSxNQUFNO2FBQ2I7Ozs7Ozs7Ozs7O0FBWUQsTUFBTTs7Ozs7O0lBRUosU0FBUyxDQUFFLEtBQVUsRUFBRSxNQUFXO1FBRWhDLE1BQU0sQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDO0tBQ3hCOzs7WUFSRixJQUFJLFNBQUM7Z0JBQ0osSUFBSSxFQUFFLGFBQWE7YUFDcEI7Ozs7Ozs7Ozs7O0FBWUQsTUFBTTs7Ozs7O0lBRUosU0FBUyxDQUFFLEtBQVUsRUFBRSxNQUFXO1FBRWhDLE1BQU0sQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDO0tBQ3hCOzs7WUFSRixJQUFJLFNBQUM7Z0JBQ0osSUFBSSxFQUFFLE9BQU87YUFDZDs7Ozs7Ozs7Ozs7QUFZRCxNQUFNOzs7Ozs7SUFFSixTQUFTLENBQUUsS0FBVSxFQUFFLE1BQVc7UUFFaEMsTUFBTSxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUM7S0FDeEI7OztZQVJGLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsVUFBVTthQUNqQjs7Ozs7Ozs7Ozs7QUFZRCxNQUFNOzs7Ozs7SUFFSixTQUFTLENBQUUsS0FBVSxFQUFFLE1BQVc7UUFFaEMsTUFBTSxDQUFDLEtBQUssS0FBSyxNQUFNLENBQUM7S0FDekI7OztZQVJGLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsV0FBVzthQUNsQjs7Ozs7Ozs7Ozs7QUFZRCxNQUFNOzs7Ozs7SUFFSixTQUFTLENBQUUsS0FBVSxFQUFFLE1BQVc7UUFFaEMsTUFBTSxDQUFDLEtBQUssS0FBSyxNQUFNLENBQUM7S0FDekI7OztZQVJGLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsY0FBYzthQUNyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdncmVhdGVyJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNHcmVhdGVyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIFxyXG4gIHRyYW5zZm9ybSAoZmlyc3Q6IGFueSwgc2Vjb25kOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGZpcnN0ID4gc2Vjb25kO1xyXG4gIH1cclxufVxyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdncmVhdGVyT3JFcXVhbCdcclxufSlcclxuZXhwb3J0IGNsYXNzIElzR3JlYXRlck9yRXF1YWxQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtIChmaXJzdDogYW55LCBzZWNvbmQ6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgXHJcbiAgICByZXR1cm4gZmlyc3QgPj0gc2Vjb25kO1xyXG4gIH1cclxufVxyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdsZXNzJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNMZXNzUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gIFxyXG4gIHRyYW5zZm9ybSAoZmlyc3Q6IGFueSwgc2Vjb25kOiBhbnkpOiBib29sZWFuIHtcclxuICAgIFxyXG4gICAgcmV0dXJuIGZpcnN0IDwgc2Vjb25kO1xyXG4gIH1cclxufVxyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdsZXNzT3JFcXVhbCdcclxufSlcclxuZXhwb3J0IGNsYXNzIElzTGVzc09yRXF1YWxQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtIChmaXJzdDogYW55LCBzZWNvbmQ6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgXHJcbiAgICByZXR1cm4gZmlyc3QgPD0gc2Vjb25kO1xyXG4gIH1cclxufVxyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdlcXVhbCdcclxufSlcclxuZXhwb3J0IGNsYXNzIElzRXF1YWxQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtIChmaXJzdDogYW55LCBzZWNvbmQ6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgXHJcbiAgICByZXR1cm4gZmlyc3QgPT0gc2Vjb25kO1xyXG4gIH1cclxufVxyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdub3RFcXVhbCdcclxufSlcclxuZXhwb3J0IGNsYXNzIElzTm90RXF1YWxQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcbiAgXHJcbiAgdHJhbnNmb3JtIChmaXJzdDogYW55LCBzZWNvbmQ6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgXHJcbiAgICByZXR1cm4gZmlyc3QgIT0gc2Vjb25kO1xyXG4gIH1cclxufVxyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdpZGVudGljYWwnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc0lkZW50aWNhbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKGZpcnN0OiBhbnksIHNlY29uZDogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiBmaXJzdCA9PT0gc2Vjb25kO1xyXG4gIH1cclxufVxyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdub3RJZGVudGljYWwnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJc05vdElkZW50aWNhbFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuICBcclxuICB0cmFuc2Zvcm0gKGZpcnN0OiBhbnksIHNlY29uZDogYW55KTogYm9vbGVhbiB7XHJcbiAgICBcclxuICAgIHJldHVybiBmaXJzdCAhPT0gc2Vjb25kO1xyXG4gIH1cclxufVxyXG5cclxuIl19