/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule } from '@angular/core';
import { EmptyPipe } from './empty.pipe';
import { HeadPipe } from './head.pipe';
import { InitialPipe } from './initial.pipe';
import { LastPipe } from './last.pipe';
import { JoinPipe } from './join.pipe';
import { TailPipe } from './tail.pipe';
import { UniqPipe } from './uniq.pipe';
import { WithoutPipe } from './without.pipe';
import { MapPipe } from './map.pipe';
import { WherePipe } from './where.pipe';
import { FirstOrDefaultPipe } from './first-or-default.pipe';
import { RangePipe } from './range.pipe';
import { PluckPipe } from './pluck.pipe';
import { ReversePipe } from './reverse.pipe';
import { OrderByPipe } from './order-by.pipe';
import { CountPipe } from './count.pipe';
import { SomePipe } from './some.pipe';
import { EveryPipe } from './every.pipe';
import { ShufflePipe } from './shuffle.pipe';
import { TakePipe } from './take.pipe';
import { DropPipe } from './drop.pipe';
import { DeepPipe } from './deep.pipe';
import { ChunkPipe } from './chunk.pipe';
import { FlattenPipe } from './flatten.pipe';
import { IntersectionPipe } from './intersection.pipe';
import { UnionPipe } from './union.pipe';
import { TakeWhilePipe } from './take-while.pipe';
import { TakeUntilPipe } from './take-until.pipe';
export class NgArrayPipesModule {
}
NgArrayPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    EmptyPipe,
                    HeadPipe,
                    InitialPipe,
                    LastPipe,
                    JoinPipe,
                    TailPipe,
                    UniqPipe,
                    WithoutPipe,
                    MapPipe,
                    WherePipe,
                    RangePipe,
                    PluckPipe,
                    ReversePipe,
                    OrderByPipe,
                    CountPipe,
                    SomePipe,
                    EveryPipe,
                    ShufflePipe,
                    TakePipe,
                    DropPipe,
                    DeepPipe,
                    ChunkPipe,
                    FlattenPipe,
                    FirstOrDefaultPipe,
                    IntersectionPipe,
                    UnionPipe,
                    TakeWhilePipe,
                    TakeUntilPipe
                ],
                exports: [
                    EmptyPipe,
                    HeadPipe,
                    InitialPipe,
                    LastPipe,
                    JoinPipe,
                    TailPipe,
                    UniqPipe,
                    WithoutPipe,
                    MapPipe,
                    WherePipe,
                    RangePipe,
                    PluckPipe,
                    ReversePipe,
                    OrderByPipe,
                    CountPipe,
                    SomePipe,
                    EveryPipe,
                    ShufflePipe,
                    TakePipe,
                    DropPipe,
                    DeepPipe,
                    ChunkPipe,
                    FlattenPipe,
                    FirstOrDefaultPipe,
                    IntersectionPipe,
                    UnionPipe,
                    TakeWhilePipe,
                    TakeUntilPipe
                ]
            },] },
];
function NgArrayPipesModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NgArrayPipesModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NgArrayPipesModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXkubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1waXBlcy8iLCJzb3VyY2VzIjpbImFycmF5L2FycmF5Lm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN2QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDckMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN2QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBaUVsRCxNQUFNOzs7WUE5REwsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRTtvQkFDWixTQUFTO29CQUNULFFBQVE7b0JBQ1IsV0FBVztvQkFDWCxRQUFRO29CQUNSLFFBQVE7b0JBQ1IsUUFBUTtvQkFDUixRQUFRO29CQUNSLFdBQVc7b0JBQ1gsT0FBTztvQkFDUCxTQUFTO29CQUNULFNBQVM7b0JBQ1QsU0FBUztvQkFDVCxXQUFXO29CQUNYLFdBQVc7b0JBQ1gsU0FBUztvQkFDVCxRQUFRO29CQUNSLFNBQVM7b0JBQ1QsV0FBVztvQkFDWCxRQUFRO29CQUNSLFFBQVE7b0JBQ1IsUUFBUTtvQkFDUixTQUFTO29CQUNULFdBQVc7b0JBQ1gsa0JBQWtCO29CQUNsQixnQkFBZ0I7b0JBQ2hCLFNBQVM7b0JBQ1QsYUFBYTtvQkFDYixhQUFhO2lCQUNkO2dCQUNELE9BQU8sRUFBRTtvQkFDUCxTQUFTO29CQUNULFFBQVE7b0JBQ1IsV0FBVztvQkFDWCxRQUFRO29CQUNSLFFBQVE7b0JBQ1IsUUFBUTtvQkFDUixRQUFRO29CQUNSLFdBQVc7b0JBQ1gsT0FBTztvQkFDUCxTQUFTO29CQUNULFNBQVM7b0JBQ1QsU0FBUztvQkFDVCxXQUFXO29CQUNYLFdBQVc7b0JBQ1gsU0FBUztvQkFDVCxRQUFRO29CQUNSLFNBQVM7b0JBQ1QsV0FBVztvQkFDWCxRQUFRO29CQUNSLFFBQVE7b0JBQ1IsUUFBUTtvQkFDUixTQUFTO29CQUNULFdBQVc7b0JBQ1gsa0JBQWtCO29CQUNsQixnQkFBZ0I7b0JBQ2hCLFNBQVM7b0JBQ1QsYUFBYTtvQkFDYixhQUFhO2lCQUNkO2FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgRW1wdHlQaXBlIH0gZnJvbSAnLi9lbXB0eS5waXBlJztcclxuaW1wb3J0IHsgSGVhZFBpcGUgfSBmcm9tICcuL2hlYWQucGlwZSc7XHJcbmltcG9ydCB7IEluaXRpYWxQaXBlIH0gZnJvbSAnLi9pbml0aWFsLnBpcGUnO1xyXG5pbXBvcnQgeyBMYXN0UGlwZSB9IGZyb20gJy4vbGFzdC5waXBlJztcclxuaW1wb3J0IHsgSm9pblBpcGUgfSBmcm9tICcuL2pvaW4ucGlwZSc7XHJcbmltcG9ydCB7IFRhaWxQaXBlIH0gZnJvbSAnLi90YWlsLnBpcGUnO1xyXG5pbXBvcnQgeyBVbmlxUGlwZSB9IGZyb20gJy4vdW5pcS5waXBlJztcclxuaW1wb3J0IHsgV2l0aG91dFBpcGUgfSBmcm9tICcuL3dpdGhvdXQucGlwZSc7XHJcbmltcG9ydCB7IE1hcFBpcGUgfSBmcm9tICcuL21hcC5waXBlJztcclxuaW1wb3J0IHsgV2hlcmVQaXBlIH0gZnJvbSAnLi93aGVyZS5waXBlJztcclxuaW1wb3J0IHsgRmlyc3RPckRlZmF1bHRQaXBlIH0gZnJvbSAnLi9maXJzdC1vci1kZWZhdWx0LnBpcGUnO1xyXG5pbXBvcnQgeyBSYW5nZVBpcGUgfSBmcm9tICcuL3JhbmdlLnBpcGUnO1xyXG5pbXBvcnQgeyBQbHVja1BpcGUgfSBmcm9tICcuL3BsdWNrLnBpcGUnO1xyXG5pbXBvcnQgeyBSZXZlcnNlUGlwZSB9IGZyb20gJy4vcmV2ZXJzZS5waXBlJztcclxuaW1wb3J0IHsgT3JkZXJCeVBpcGUgfSBmcm9tICcuL29yZGVyLWJ5LnBpcGUnO1xyXG5pbXBvcnQgeyBDb3VudFBpcGUgfSBmcm9tICcuL2NvdW50LnBpcGUnO1xyXG5pbXBvcnQgeyBTb21lUGlwZSB9IGZyb20gJy4vc29tZS5waXBlJztcclxuaW1wb3J0IHsgRXZlcnlQaXBlIH0gZnJvbSAnLi9ldmVyeS5waXBlJztcclxuaW1wb3J0IHsgU2h1ZmZsZVBpcGUgfSBmcm9tICcuL3NodWZmbGUucGlwZSc7XHJcbmltcG9ydCB7IFRha2VQaXBlIH0gZnJvbSAnLi90YWtlLnBpcGUnO1xyXG5pbXBvcnQgeyBEcm9wUGlwZSB9IGZyb20gJy4vZHJvcC5waXBlJztcclxuaW1wb3J0IHsgRGVlcFBpcGUgfSBmcm9tICcuL2RlZXAucGlwZSc7XHJcbmltcG9ydCB7IENodW5rUGlwZSB9IGZyb20gJy4vY2h1bmsucGlwZSc7XHJcbmltcG9ydCB7IEZsYXR0ZW5QaXBlIH0gZnJvbSAnLi9mbGF0dGVuLnBpcGUnO1xyXG5pbXBvcnQgeyBJbnRlcnNlY3Rpb25QaXBlIH0gZnJvbSAnLi9pbnRlcnNlY3Rpb24ucGlwZSc7XHJcbmltcG9ydCB7IFVuaW9uUGlwZSB9IGZyb20gJy4vdW5pb24ucGlwZSc7XHJcbmltcG9ydCB7IFRha2VXaGlsZVBpcGUgfSBmcm9tICcuL3Rha2Utd2hpbGUucGlwZSc7XHJcbmltcG9ydCB7IFRha2VVbnRpbFBpcGUgfSBmcm9tICcuL3Rha2UtdW50aWwucGlwZSc7XHJcblxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtcclxuICAgIEVtcHR5UGlwZSxcclxuICAgIEhlYWRQaXBlLFxyXG4gICAgSW5pdGlhbFBpcGUsXHJcbiAgICBMYXN0UGlwZSxcclxuICAgIEpvaW5QaXBlLFxyXG4gICAgVGFpbFBpcGUsXHJcbiAgICBVbmlxUGlwZSxcclxuICAgIFdpdGhvdXRQaXBlLFxyXG4gICAgTWFwUGlwZSxcclxuICAgIFdoZXJlUGlwZSxcclxuICAgIFJhbmdlUGlwZSxcclxuICAgIFBsdWNrUGlwZSxcclxuICAgIFJldmVyc2VQaXBlLFxyXG4gICAgT3JkZXJCeVBpcGUsXHJcbiAgICBDb3VudFBpcGUsXHJcbiAgICBTb21lUGlwZSxcclxuICAgIEV2ZXJ5UGlwZSxcclxuICAgIFNodWZmbGVQaXBlLFxyXG4gICAgVGFrZVBpcGUsXHJcbiAgICBEcm9wUGlwZSxcclxuICAgIERlZXBQaXBlLFxyXG4gICAgQ2h1bmtQaXBlLFxyXG4gICAgRmxhdHRlblBpcGUsXHJcbiAgICBGaXJzdE9yRGVmYXVsdFBpcGUsXHJcbiAgICBJbnRlcnNlY3Rpb25QaXBlLFxyXG4gICAgVW5pb25QaXBlLFxyXG4gICAgVGFrZVdoaWxlUGlwZSxcclxuICAgIFRha2VVbnRpbFBpcGVcclxuICBdLFxyXG4gIGV4cG9ydHM6IFtcclxuICAgIEVtcHR5UGlwZSxcclxuICAgIEhlYWRQaXBlLFxyXG4gICAgSW5pdGlhbFBpcGUsXHJcbiAgICBMYXN0UGlwZSxcclxuICAgIEpvaW5QaXBlLFxyXG4gICAgVGFpbFBpcGUsXHJcbiAgICBVbmlxUGlwZSxcclxuICAgIFdpdGhvdXRQaXBlLFxyXG4gICAgTWFwUGlwZSxcclxuICAgIFdoZXJlUGlwZSxcclxuICAgIFJhbmdlUGlwZSxcclxuICAgIFBsdWNrUGlwZSxcclxuICAgIFJldmVyc2VQaXBlLFxyXG4gICAgT3JkZXJCeVBpcGUsXHJcbiAgICBDb3VudFBpcGUsXHJcbiAgICBTb21lUGlwZSxcclxuICAgIEV2ZXJ5UGlwZSxcclxuICAgIFNodWZmbGVQaXBlLFxyXG4gICAgVGFrZVBpcGUsXHJcbiAgICBEcm9wUGlwZSxcclxuICAgIERlZXBQaXBlLFxyXG4gICAgQ2h1bmtQaXBlLFxyXG4gICAgRmxhdHRlblBpcGUsXHJcbiAgICBGaXJzdE9yRGVmYXVsdFBpcGUsXHJcbiAgICBJbnRlcnNlY3Rpb25QaXBlLFxyXG4gICAgVW5pb25QaXBlLFxyXG4gICAgVGFrZVdoaWxlUGlwZSxcclxuICAgIFRha2VVbnRpbFBpcGVcclxuICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ0FycmF5UGlwZXNNb2R1bGUge31cclxuIl19