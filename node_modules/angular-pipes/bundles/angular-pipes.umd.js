(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('angular-pipes', ['exports', 'tslib', '@angular/core'], factory) :
    (factory((global['angular-pipes'] = {}),global.tslib,global.ng.core));
}(this, (function (exports,tslib_1,core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} value
     * @return {?}
     */
    function isUndefined(value) {
        return typeof value === 'undefined';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isNull(value) {
        return value === null;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isNumber(value) {
        return typeof value === 'number';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isNumberFinite(value) {
        return isNumber(value) && isFinite(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isPositive(value) {
        return value >= 0;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isInteger(value) {
        // No rest, is an integer
        return (value % 1) === 0;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isNil(value) {
        return value === null || typeof (value) === 'undefined';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isString(value) {
        return typeof value === 'string';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isObject(value) {
        return typeof value === 'object';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isArray(value) {
        return Array.isArray(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function isFunction(value) {
        return typeof value === 'function';
    }
    /**
     * @param {?} value
     * @param {?} decimal
     * @return {?}
     */
    function toDecimal(value, decimal) {
        return Math.round(value * Math.pow(10, decimal)) / Math.pow(10, decimal);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function upperFirst(value) {
        return value.slice(0, 1).toUpperCase() + value.slice(1);
    }
    /**
     * @param {?} method
     * @return {?}
     */
    function createRound(method) {
        // <any>Math to suppress error
        var /** @type {?} */ func = ((Math))[method];
        return function (value, precision) {
            if (precision === void 0) {
                precision = 0;
            }
            if (typeof value === 'string') {
                throw new TypeError('Rounding method needs a number');
            }
            if (typeof precision !== 'number' || isNaN(precision)) {
                precision = 0;
            }
            if (precision) {
                var /** @type {?} */ pair = (value + "e").split('e');
                var /** @type {?} */ val = func(pair[0] + "e" + (+pair[1] + precision));
                pair = (val + "e").split('e');
                return +(pair[0] + 'e' + (+pair[1] - precision));
            }
            return func(value);
        };
    }
    /**
     * @param {?} str
     * @param {?=} len
     * @param {?=} ch
     * @return {?}
     */
    function leftPad(str, len, ch) {
        if (len === void 0) {
            len = 0;
        }
        if (ch === void 0) {
            ch = ' ';
        }
        str = String(str);
        ch = toString(ch);
        var /** @type {?} */ i = -1;
        var /** @type {?} */ length = len - str.length;
        while (++i < length && (str.length + ch.length) <= len) {
            str = ch + str;
        }
        return str;
    }
    /**
     * @param {?} str
     * @param {?=} len
     * @param {?=} ch
     * @return {?}
     */
    function rightPad(str, len, ch) {
        if (len === void 0) {
            len = 0;
        }
        if (ch === void 0) {
            ch = ' ';
        }
        str = String(str);
        ch = toString(ch);
        var /** @type {?} */ i = -1;
        var /** @type {?} */ length = len - str.length;
        while (++i < length && (str.length + ch.length) <= len) {
            str += ch;
        }
        return str;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    function toString(value) {
        return "" + value;
    }
    /**
     * @param {?} str
     * @param {?=} len
     * @param {?=} ch
     * @return {?}
     */
    function pad(str, len, ch) {
        if (len === void 0) {
            len = 0;
        }
        if (ch === void 0) {
            ch = ' ';
        }
        str = String(str);
        ch = toString(ch);
        var /** @type {?} */ i = -1;
        var /** @type {?} */ length = len - str.length;
        var /** @type {?} */ left = true;
        while (++i < length) {
            var /** @type {?} */ l = (str.length + ch.length <= len) ? (str.length + ch.length) : (str.length + 1);
            if (left) {
                str = leftPad(str, l, ch);
            }
            else {
                str = rightPad(str, l, ch);
            }
            left = !left;
        }
        return str;
    }
    /**
     * @param {?} input
     * @param {?=} index
     * @return {?}
     */
    function flatten(input, index) {
        if (index === void 0) {
            index = 0;
        }
        if (index >= input.length) {
            return input;
        }
        if (isArray(input[index])) {
            return flatten(input.slice(0, index).concat(input[index], input.slice(index + 1)), index);
        }
        return flatten(input, index + 1);
    }
    /**
     * @param {?} value
     * @param {?} key
     * @return {?}
     */
    function getProperty(value, key) {
        if (isNil(value) || !isObject(value)) {
            return undefined;
        }
        var /** @type {?} */ keys = key.split('.');
        var /** @type {?} */ result = value[((keys.shift()))];
        try {
            for (var keys_1 = tslib_1.__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                var key_1 = keys_1_1.value;
                if (isNil(result) || !isObject(result)) {
                    return undefined;
                }
                result = result[key_1];
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return))
                    _a.call(keys_1);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        return result;
        var e_1, _a;
    }
    /**
     * @param {?} input
     * @param {?=} initial
     * @return {?}
     */
    function sum(input, initial) {
        if (initial === void 0) {
            initial = 0;
        }
        return input.reduce(function (previous, current) { return previous + current; }, initial);
    }
    /**
     * @param {?} input
     * @return {?}
     */
    function shuffle(input) {
        if (!isArray(input)) {
            return input;
        }
        var /** @type {?} */ copy = tslib_1.__spread(input);
        for (var /** @type {?} */ i = copy.length; i; --i) {
            var /** @type {?} */ j = Math.floor(Math.random() * i);
            var /** @type {?} */ x = copy[i - 1];
            copy[i - 1] = copy[j];
            copy[j] = x;
        }
        return copy;
    }
    /**
     * @param {?} collection
     * @param {?} value
     * @return {?}
     */
    function deepIndexOf(collection, value) {
        var /** @type {?} */ index = -1;
        var /** @type {?} */ length = collection.length;
        while (++index < length) {
            if (deepEqual(value, collection[index])) {
                return index;
            }
        }
        return -1;
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function deepEqual(a, b) {
        if (a === b) {
            return true;
        }
        if (!(typeof a === 'object' && typeof b === 'object')) {
            return a === b;
        }
        var /** @type {?} */ keysA = Object.keys(a);
        var /** @type {?} */ keysB = Object.keys(b);
        if (keysA.length !== keysB.length) {
            return false;
        }
        // Test for A's keys different from B.
        var /** @type {?} */ hasOwn = Object.prototype.hasOwnProperty;
        for (var /** @type {?} */ i = 0; i < keysA.length; i++) {
            var /** @type {?} */ key = keysA[i];
            if (!hasOwn.call(b, keysA[i]) || !deepEqual(a[key], b[key])) {
                return false;
            }
        }
        return true;
    }
    /**
     * @param {?} object
     * @return {?}
     */
    function isDeepObject(object) {
        return object.__isDeepObject__;
    }
    /**
     * @param {?} object
     * @return {?}
     */
    function wrapDeep(object) {
        return new DeepWrapper(object);
    }
    /**
     * @param {?} object
     * @return {?}
     */
    function unwrapDeep(object) {
        if (isDeepObject(object)) {
            return object.data;
        }
        return object;
    }
    var DeepWrapper = (function () {
        function DeepWrapper(data) {
            this.data = data;
            this.__isDeepObject__ = true;
        }
        return DeepWrapper;
    }());
    /**
     * @param {?} input
     * @return {?}
     */
    function count(input) {
        if (!isArray(input) && !isObject(input) && !isString(input)) {
            return input;
        }
        if (isObject(input)) {
            return Object.keys(input).map(function (value) { return input[value]; }).length;
        }
        return input.length;
    }
    /**
     * @param {?} input
     * @return {?}
     */
    function empty(input) {
        if (!isArray(input)) {
            return input;
        }
        return input.length === 0;
    }
    /**
     * @param {?} input
     * @param {?} predicate
     * @return {?}
     */
    function every(input, predicate) {
        if (!isArray(input) || !predicate) {
            return input;
        }
        var /** @type {?} */ result = true;
        var /** @type {?} */ i = -1;
        while (++i < input.length && result) {
            result = predicate(input[i], i, input);
        }
        return result;
    }
    /**
     * @param {?} input
     * @param {?} predicate
     * @return {?}
     */
    function takeUntil(input, predicate) {
        var /** @type {?} */ i = -1;
        var /** @type {?} */ result = [];
        while (++i < input.length && !predicate(input[i], i, input)) {
            result[i] = input[i];
        }
        return result;
    }
    /**
     * @param {?} input
     * @param {?} predicate
     * @return {?}
     */
    function takeWhile(input, predicate) {
        return takeUntil(input, function (item, index, collection) { return !predicate(item, index, collection); });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var GroupByPipe = (function () {
        function GroupByPipe() {
        }
        /**
         * @param {?} input
         * @param {?} prop
         * @return {?}
         */
        GroupByPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} prop
         * @return {?}
         */
            function (input, prop) {
                if (!isArray(input)) {
                    return input;
                }
                var /** @type {?} */ arr = {};
                try {
                    for (var input_1 = tslib_1.__values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
                        var value = input_1_1.value;
                        var /** @type {?} */ field = getProperty(value, prop);
                        if (isUndefined(arr[field])) {
                            arr[field] = [];
                        }
                        arr[field].push(value);
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (input_1_1 && !input_1_1.done && (_a = input_1.return))
                            _a.call(input_1);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return Object.keys(arr).map(function (key) { return ({ key: key, 'value': arr[key] }); });
                var e_1, _a;
            };
        GroupByPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'groupBy'
                    },] },
        ];
        return GroupByPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MaxPipe = (function () {
        function MaxPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        MaxPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isArray(input)) {
                    return input;
                }
                if (input.length === 0) {
                    return undefined;
                }
                var /** @type {?} */ max = input[0];
                input.forEach(function (value) {
                    if (max < value) {
                        max = value;
                    }
                });
                return max;
            };
        MaxPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'max'
                    },] },
        ];
        return MaxPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MeanPipe = (function () {
        function MeanPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        MeanPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isArray(input)) {
                    return input;
                }
                var /** @type {?} */ count$$1 = input.length;
                if (count$$1 === 0) {
                    return undefined;
                }
                return sum(input) / count$$1;
            };
        MeanPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'mean'
                    },] },
        ];
        return MeanPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MinPipe = (function () {
        function MinPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        MinPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isArray(input)) {
                    return input;
                }
                if (input.length === 0) {
                    return undefined;
                }
                var /** @type {?} */ min = input[0];
                input.forEach(function (value) {
                    if (min > value) {
                        min = value;
                    }
                });
                return min;
            };
        MinPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'min'
                    },] },
        ];
        return MinPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SumPipe = (function () {
        function SumPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        SumPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                return !isArray(input) ? input : sum(input);
            };
        SumPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'sum' },] },
        ];
        return SumPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgAggregatePipesModule = (function () {
        function NgAggregatePipesModule() {
        }
        NgAggregatePipesModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            GroupByPipe,
                            MaxPipe,
                            MeanPipe,
                            MinPipe,
                            SumPipe
                        ],
                        exports: [
                            GroupByPipe,
                            MaxPipe,
                            MeanPipe,
                            MinPipe,
                            SumPipe
                        ]
                    },] },
        ];
        return NgAggregatePipesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var EmptyPipe = (function () {
        function EmptyPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        EmptyPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                return empty(input);
            };
        EmptyPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'empty'
                    },] },
        ];
        return EmptyPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var HeadPipe = (function () {
        function HeadPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        HeadPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isArray(input)) {
                    return input;
                }
                // Will return undefined if length is 0
                return input[0];
            };
        HeadPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'head'
                    },] },
        ];
        return HeadPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var InitialPipe = (function () {
        function InitialPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        InitialPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isArray(input)) {
                    return input;
                }
                return input.slice(0, input.length - 1);
            };
        InitialPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'initial'
                    },] },
        ];
        return InitialPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var LastPipe = (function () {
        function LastPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        LastPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isArray(input)) {
                    return input;
                }
                // Returns undefined if empty
                return input[input.length - 1];
            };
        LastPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'last'
                    },] },
        ];
        return LastPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var JoinPipe = (function () {
        function JoinPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} character
         * @return {?}
         */
        JoinPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} character
         * @return {?}
         */
            function (input, character) {
                if (character === void 0) {
                    character = '';
                }
                if (!isArray(input)) {
                    return input;
                }
                return input.join(character);
            };
        JoinPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'join'
                    },] },
        ];
        return JoinPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TailPipe = (function () {
        function TailPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        TailPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isArray(input)) {
                    return input;
                }
                return input.slice(1, input.length);
            };
        TailPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'tail'
                    },] },
        ];
        return TailPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var UniqPipe = (function () {
        function UniqPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        UniqPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isArray(input) && !isDeepObject(input)) {
                    return input;
                }
                if (isDeepObject(input)) {
                    var /** @type {?} */ unwrappedInput_1 = unwrapDeep(input);
                    if (!isArray(unwrappedInput_1)) {
                        return unwrappedInput_1;
                    }
                    return unwrappedInput_1.filter(function (value, index) {
                        return deepIndexOf(unwrappedInput_1, value) === index;
                    });
                }
                return input.filter(function (value, index) { return input.indexOf(value) === index; });
            };
        UniqPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'uniq'
                    },] },
        ];
        return UniqPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var WithoutPipe = (function () {
        function WithoutPipe() {
        }
        /**
         * @param {?} input
         * @param {...?} args
         * @return {?}
         */
        WithoutPipe.prototype.transform = /**
         * @param {?} input
         * @param {...?} args
         * @return {?}
         */
            function (input) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (!isArray(input) && !isDeepObject(input)) {
                    return input;
                }
                if (isDeepObject(input)) {
                    var /** @type {?} */ unwrappedInput = unwrapDeep(input);
                    if (!isArray(unwrappedInput)) {
                        return unwrappedInput;
                    }
                    return unwrappedInput.filter(function (value) {
                        return deepIndexOf(args, value) === -1;
                    });
                }
                return input.filter(function (value) { return args.indexOf(value) === -1; });
            };
        WithoutPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'without'
                    },] },
        ];
        return WithoutPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MapPipe = (function () {
        function MapPipe() {
        }
        /**
         * @param {?} input
         * @param {?} fn
         * @return {?}
         */
        MapPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} fn
         * @return {?}
         */
            function (input, fn) {
                if (!isArray(input) || !fn) {
                    return input;
                }
                return input.map(fn);
            };
        MapPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'map'
                    },] },
        ];
        return MapPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var WherePipe = (function () {
        function WherePipe() {
        }
        /**
        * Support a function or a value or the shorthand ['key', value] like the lodash shorthand.
        */
        /**
         * Support a function or a value or the shorthand ['key', value] like the lodash shorthand.
         * @param {?} input
         * @param {?} fn
         * @return {?}
         */
        WherePipe.prototype.transform = /**
         * Support a function or a value or the shorthand ['key', value] like the lodash shorthand.
         * @param {?} input
         * @param {?} fn
         * @return {?}
         */
            function (input, fn) {
                if (!isArray(input)) {
                    return input;
                }
                if (isFunction(fn)) {
                    return input.filter(fn);
                }
                else if (isArray(fn)) {
                    var _a = tslib_1.__read(fn, 2), key_1 = _a[0], value_1 = _a[1];
                    return input.filter(function (item) { return getProperty(item, key_1) === value_1; });
                }
                else if (fn) {
                    return input.filter(function (item) { return item === fn; });
                }
                else {
                    return input;
                }
            };
        WherePipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'where'
                    },] },
        ];
        return WherePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FirstOrDefaultPipe = (function () {
        function FirstOrDefaultPipe() {
        }
        /**
         * @param {?} input
         * @param {?} predicate
         * @param {?=} defaultValue
         * @return {?}
         */
        FirstOrDefaultPipe.find = /**
         * @param {?} input
         * @param {?} predicate
         * @param {?=} defaultValue
         * @return {?}
         */
            function (input, predicate, defaultValue) {
                var /** @type {?} */ found = false;
                var /** @type {?} */ result;
                var /** @type {?} */ i = -1;
                while (!found && ++i < input.length) {
                    found = predicate(input[i], i, input);
                }
                if (found) {
                    result = input[i];
                }
                if (typeof result === 'undefined' && typeof defaultValue !== 'undefined') {
                    result = defaultValue;
                }
                return result;
            };
        /**
         * @param {?} input
         * @param {?} predicate
         * @param {?=} defaultValue
         * @return {?}
         */
        FirstOrDefaultPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} predicate
         * @param {?=} defaultValue
         * @return {?}
         */
            function (input, predicate, defaultValue) {
                if (!isArray(input)) {
                    return input;
                }
                if (isFunction(predicate)) {
                    return FirstOrDefaultPipe.find(input, /** @type {?} */ (predicate), defaultValue);
                }
                else if (isArray(predicate)) {
                    var _a = tslib_1.__read(/** @type {?} */ (predicate), 2), key_1 = _a[0], value_1 = _a[1];
                    return FirstOrDefaultPipe.find(input, function (item) { return getProperty(item, key_1) === value_1; }, defaultValue);
                }
                else if (predicate) {
                    return FirstOrDefaultPipe.find(input, function (item) { return item === /** @type {?} */ (predicate); }, defaultValue);
                }
                else {
                    return input;
                }
            };
        FirstOrDefaultPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'firstOrDefault'
                    },] },
        ];
        return FirstOrDefaultPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var RangePipe = (function () {
        function RangePipe() {
        }
        /**
         * @param {?} _input
         * @param {?=} size
         * @param {?=} start
         * @param {?=} step
         * @return {?}
         */
        RangePipe.prototype.transform = /**
         * @param {?} _input
         * @param {?=} size
         * @param {?=} start
         * @param {?=} step
         * @return {?}
         */
            function (_input, size, start, step) {
                if (size === void 0) {
                    size = 0;
                }
                if (start === void 0) {
                    start = 1;
                }
                if (step === void 0) {
                    step = 1;
                }
                var /** @type {?} */ range = [];
                for (var /** @type {?} */ length_1 = 0; length_1 < size; ++length_1) {
                    range.push(start);
                    start += step;
                }
                return range;
            };
        RangePipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'range'
                    },] },
        ];
        return RangePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var PluckPipe = (function () {
        function PluckPipe() {
        }
        /**
         * @param {?} input
         * @param {?} key
         * @return {?}
         */
        PluckPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} key
         * @return {?}
         */
            function (input, key) {
                if (!isArray(input) || !key) {
                    return input;
                }
                return input.map(function (value) {
                    return getProperty(value, key);
                });
            };
        PluckPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'pluck'
                    },] },
        ];
        return PluckPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ReversePipe = (function () {
        function ReversePipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        ReversePipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isArray(input)) {
                    return input;
                }
                return tslib_1.__spread(input).reverse();
            };
        ReversePipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'reverse'
                    },] },
        ];
        return ReversePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var OrderByPipe = (function () {
        function OrderByPipe() {
        }
        /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        OrderByPipe._orderBy = /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
            function (a, b) {
                if (a instanceof Date && b instanceof Date) {
                    return (a < b) ? -1 : (a > b) ? 1 : 0;
                }
                var /** @type {?} */ floatA = parseFloat(a);
                var /** @type {?} */ floatB = parseFloat(b);
                if (typeof a === 'string' && typeof b === 'string' && (isNaN(floatA) || isNaN(floatB))) {
                    var /** @type {?} */ lowerA = a.toLowerCase();
                    var /** @type {?} */ lowerB = b.toLowerCase();
                    return (lowerA < lowerB) ? -1 : (lowerA > lowerB) ? 1 : 0;
                }
                return (floatA < floatB) ? -1 : (floatA > floatB) ? 1 : 0;
            };
        /**
         * @param {?} input
         * @param {?=} config
         * @return {?}
         */
        OrderByPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} config
         * @return {?}
         */
            function (input, config) {
                if (config === void 0) {
                    config = '+';
                }
                if (!isArray(input)) {
                    return input;
                }
                var /** @type {?} */ configIsArray = isArray(config);
                // If config === 'param' OR ['param']
                if (!configIsArray || (configIsArray && config.length === 1)) {
                    var /** @type {?} */ propertyToCheck = configIsArray ? config[0] : config;
                    var /** @type {?} */ first = propertyToCheck.substr(0, 1);
                    var /** @type {?} */ desc_1 = (first === '-'); // First character is '-'
                    // Basic array (if only + or - is present)
                    if (!propertyToCheck || propertyToCheck === '-' || propertyToCheck === '+') {
                        return tslib_1.__spread(input).sort(function (a, b) {
                            var /** @type {?} */ comparator = OrderByPipe._orderBy(a, b);
                            return desc_1 ? -comparator : comparator;
                        });
                    }
                    else {
                        // If contains + or -, substring the property
                        var /** @type {?} */ property_1 = (first === '+' || desc_1) ? propertyToCheck.substr(1) : propertyToCheck;
                        return tslib_1.__spread(input).sort(function (a, b) {
                            var /** @type {?} */ comparator = OrderByPipe._orderBy(a[property_1], b[property_1]);
                            return desc_1 ? -comparator : comparator;
                        });
                    }
                }
                else {
                    // Config is an array of property
                    return tslib_1.__spread(input).sort(function (a, b) {
                        for (var /** @type {?} */ i = 0; i < config.length; ++i) {
                            var /** @type {?} */ first = config[i].substr(0, 1);
                            var /** @type {?} */ desc = (first === '-');
                            var /** @type {?} */ property = (first === '+' || desc) ? config[i].substr(1) : config[i];
                            var /** @type {?} */ comparator = OrderByPipe._orderBy(a[property], b[property]);
                            var /** @type {?} */ comparison = desc ? -comparator : comparator;
                            if (comparison !== 0) {
                                return comparison;
                            }
                        }
                        return 0;
                    });
                }
            };
        OrderByPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'orderBy'
                    },] },
        ];
        return OrderByPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CountPipe = (function () {
        function CountPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        CountPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                return count(input);
            };
        CountPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'count'
                    },] },
        ];
        return CountPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SomePipe = (function () {
        function SomePipe() {
        }
        /**
         * @param {?} input
         * @param {?} predicate
         * @return {?}
         */
        SomePipe.prototype.transform = /**
         * @param {?} input
         * @param {?} predicate
         * @return {?}
         */
            function (input, predicate) {
                if (!isArray(input) || !predicate) {
                    return input;
                }
                var /** @type {?} */ result = false;
                var /** @type {?} */ i = -1;
                while (++i < input.length && !result) {
                    result = predicate(input[i], i, input);
                }
                return result;
            };
        SomePipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'some'
                    },] },
        ];
        return SomePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var EveryPipe = (function () {
        function EveryPipe() {
        }
        /**
         * @param {?} input
         * @param {?} predicate
         * @return {?}
         */
        EveryPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} predicate
         * @return {?}
         */
            function (input, predicate) {
                return every(input, predicate);
            };
        EveryPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'every'
                    },] },
        ];
        return EveryPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ShufflePipe = (function () {
        function ShufflePipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        ShufflePipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                return shuffle(input);
            };
        ShufflePipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'shuffle'
                    },] },
        ];
        return ShufflePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TakePipe = (function () {
        function TakePipe() {
        }
        /**
         * @param {?} input
         * @param {?=} quantity
         * @return {?}
         */
        TakePipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} quantity
         * @return {?}
         */
            function (input, quantity) {
                if (!isArray(input)) {
                    return input;
                }
                return input.slice(0, quantity || 1);
            };
        TakePipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'take'
                    },] },
        ];
        return TakePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DropPipe = (function () {
        function DropPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} quantity
         * @return {?}
         */
        DropPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} quantity
         * @return {?}
         */
            function (input, quantity) {
                if (!isArray(input)) {
                    return input;
                }
                return input.slice(quantity || 1, input.lenth);
            };
        DropPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'drop'
                    },] },
        ];
        return DropPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DeepPipe = (function () {
        function DeepPipe() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        DeepPipe.prototype.transform = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (isDeepObject(value)) {
                    return value;
                }
                return wrapDeep(value);
            };
        DeepPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'deep'
                    },] },
        ];
        return DeepPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ChunkPipe = (function () {
        function ChunkPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} size
         * @return {?}
         */
        ChunkPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} size
         * @return {?}
         */
            function (input, size) {
                if (size === void 0) {
                    size = 1;
                }
                if (!isArray(input)) {
                    return input;
                }
                return [].concat.apply([], input.map(function (_elem, i) {
                    return i % size ? [] : [input.slice(i, i + size)];
                }));
            };
        ChunkPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'chunk'
                    },] },
        ];
        return ChunkPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FlattenPipe = (function () {
        function FlattenPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        FlattenPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                var /** @type {?} */ isDeep = isDeepObject(input);
                if (!isArray(input) && !isDeep) {
                    return input;
                }
                if (isDeep) {
                    var /** @type {?} */ unwrapped = unwrapDeep(input);
                    if (!isArray(unwrapped)) {
                        return unwrapped;
                    }
                    return flatten(unwrapped, 0);
                }
                return [].concat.apply([], input);
            };
        FlattenPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'flatten' },] },
        ];
        return FlattenPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var IntersectionPipe = (function () {
        function IntersectionPipe() {
        }
        /**
         * @param {?=} a
         * @param {?=} b
         * @return {?}
         */
        IntersectionPipe.prototype.transform = /**
         * @param {?=} a
         * @param {?=} b
         * @return {?}
         */
            function (a, b) {
                if ((!isArray(a) && !isDeepObject(a)) || !isArray(b)) {
                    return [];
                }
                if (isDeepObject(a)) {
                    var /** @type {?} */ unwrapped = unwrapDeep(a);
                    if (!isArray(unwrapped)) {
                        return [];
                    }
                    return unwrapped.reduce(function (intersection, value) {
                        return intersection.concat((deepIndexOf(b, value) !== -1 && deepIndexOf(intersection, value) === -1) ? value : []);
                    }, []);
                }
                return a.reduce(function (intersection, value) {
                    return intersection.concat((b.indexOf(value) !== -1 && intersection.indexOf(value) === -1) ? value : []);
                }, []);
            };
        IntersectionPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'intersection'
                    },] },
        ];
        return IntersectionPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var UnionPipe = (function () {
        function UnionPipe() {
        }
        /**
         * @param {?=} a
         * @param {?=} b
         * @return {?}
         */
        UnionPipe.prototype.transform = /**
         * @param {?=} a
         * @param {?=} b
         * @return {?}
         */
            function (a, b) {
                if ((!isArray(a) && !isDeepObject(a)) || !isArray(b)) {
                    return [];
                }
                if (isDeepObject(a)) {
                    var /** @type {?} */ unwrapped = unwrapDeep(a);
                    if (!isArray(unwrapped)) {
                        return [];
                    }
                    return []
                        .concat(unwrapped)
                        .concat(b)
                        .filter(function (value, index, input) { return deepIndexOf(input, value) === index; });
                }
                return [].concat(a).concat(b).filter(function (value, index, input) { return input.indexOf(value) === index; });
            };
        UnionPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'union'
                    },] },
        ];
        return UnionPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TakeWhilePipe = (function () {
        function TakeWhilePipe() {
        }
        /**
         * @param {?} input
         * @param {?=} predicate
         * @return {?}
         */
        TakeWhilePipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} predicate
         * @return {?}
         */
            function (input, predicate) {
                if (!isArray(input) || isNil(predicate)) {
                    return input;
                }
                return takeWhile(input, predicate);
            };
        TakeWhilePipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'takeWhile'
                    },] },
        ];
        return TakeWhilePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TakeUntilPipe = (function () {
        function TakeUntilPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} predicate
         * @return {?}
         */
        TakeUntilPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} predicate
         * @return {?}
         */
            function (input, predicate) {
                if (!isArray(input) || isNil(predicate)) {
                    return input;
                }
                return takeUntil(input, predicate);
            };
        TakeUntilPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'takeUntil'
                    },] },
        ];
        return TakeUntilPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgArrayPipesModule = (function () {
        function NgArrayPipesModule() {
        }
        NgArrayPipesModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            EmptyPipe,
                            HeadPipe,
                            InitialPipe,
                            LastPipe,
                            JoinPipe,
                            TailPipe,
                            UniqPipe,
                            WithoutPipe,
                            MapPipe,
                            WherePipe,
                            RangePipe,
                            PluckPipe,
                            ReversePipe,
                            OrderByPipe,
                            CountPipe,
                            SomePipe,
                            EveryPipe,
                            ShufflePipe,
                            TakePipe,
                            DropPipe,
                            DeepPipe,
                            ChunkPipe,
                            FlattenPipe,
                            FirstOrDefaultPipe,
                            IntersectionPipe,
                            UnionPipe,
                            TakeWhilePipe,
                            TakeUntilPipe
                        ],
                        exports: [
                            EmptyPipe,
                            HeadPipe,
                            InitialPipe,
                            LastPipe,
                            JoinPipe,
                            TailPipe,
                            UniqPipe,
                            WithoutPipe,
                            MapPipe,
                            WherePipe,
                            RangePipe,
                            PluckPipe,
                            ReversePipe,
                            OrderByPipe,
                            CountPipe,
                            SomePipe,
                            EveryPipe,
                            ShufflePipe,
                            TakePipe,
                            DropPipe,
                            DeepPipe,
                            ChunkPipe,
                            FlattenPipe,
                            FirstOrDefaultPipe,
                            IntersectionPipe,
                            UnionPipe,
                            TakeWhilePipe,
                            TakeUntilPipe
                        ]
                    },] },
        ];
        return NgArrayPipesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var IsGreaterPipe = (function () {
        function IsGreaterPipe() {
        }
        /**
         * @param {?} first
         * @param {?} second
         * @return {?}
         */
        IsGreaterPipe.prototype.transform = /**
         * @param {?} first
         * @param {?} second
         * @return {?}
         */
            function (first, second) {
                return first > second;
            };
        IsGreaterPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'greater'
                    },] },
        ];
        return IsGreaterPipe;
    }());
    var IsGreaterOrEqualPipe = (function () {
        function IsGreaterOrEqualPipe() {
        }
        /**
         * @param {?} first
         * @param {?} second
         * @return {?}
         */
        IsGreaterOrEqualPipe.prototype.transform = /**
         * @param {?} first
         * @param {?} second
         * @return {?}
         */
            function (first, second) {
                return first >= second;
            };
        IsGreaterOrEqualPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'greaterOrEqual'
                    },] },
        ];
        return IsGreaterOrEqualPipe;
    }());
    var IsLessPipe = (function () {
        function IsLessPipe() {
        }
        /**
         * @param {?} first
         * @param {?} second
         * @return {?}
         */
        IsLessPipe.prototype.transform = /**
         * @param {?} first
         * @param {?} second
         * @return {?}
         */
            function (first, second) {
                return first < second;
            };
        IsLessPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'less'
                    },] },
        ];
        return IsLessPipe;
    }());
    var IsLessOrEqualPipe = (function () {
        function IsLessOrEqualPipe() {
        }
        /**
         * @param {?} first
         * @param {?} second
         * @return {?}
         */
        IsLessOrEqualPipe.prototype.transform = /**
         * @param {?} first
         * @param {?} second
         * @return {?}
         */
            function (first, second) {
                return first <= second;
            };
        IsLessOrEqualPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'lessOrEqual'
                    },] },
        ];
        return IsLessOrEqualPipe;
    }());
    var IsEqualPipe = (function () {
        function IsEqualPipe() {
        }
        /**
         * @param {?} first
         * @param {?} second
         * @return {?}
         */
        IsEqualPipe.prototype.transform = /**
         * @param {?} first
         * @param {?} second
         * @return {?}
         */
            function (first, second) {
                return first == second;
            };
        IsEqualPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'equal'
                    },] },
        ];
        return IsEqualPipe;
    }());
    var IsNotEqualPipe = (function () {
        function IsNotEqualPipe() {
        }
        /**
         * @param {?} first
         * @param {?} second
         * @return {?}
         */
        IsNotEqualPipe.prototype.transform = /**
         * @param {?} first
         * @param {?} second
         * @return {?}
         */
            function (first, second) {
                return first != second;
            };
        IsNotEqualPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'notEqual'
                    },] },
        ];
        return IsNotEqualPipe;
    }());
    var IsIdenticalPipe = (function () {
        function IsIdenticalPipe() {
        }
        /**
         * @param {?} first
         * @param {?} second
         * @return {?}
         */
        IsIdenticalPipe.prototype.transform = /**
         * @param {?} first
         * @param {?} second
         * @return {?}
         */
            function (first, second) {
                return first === second;
            };
        IsIdenticalPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'identical'
                    },] },
        ];
        return IsIdenticalPipe;
    }());
    var IsNotIdenticalPipe = (function () {
        function IsNotIdenticalPipe() {
        }
        /**
         * @param {?} first
         * @param {?} second
         * @return {?}
         */
        IsNotIdenticalPipe.prototype.transform = /**
         * @param {?} first
         * @param {?} second
         * @return {?}
         */
            function (first, second) {
                return first !== second;
            };
        IsNotIdenticalPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'notIdentical'
                    },] },
        ];
        return IsNotIdenticalPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var IsNullPipe = (function () {
        function IsNullPipe() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        IsNullPipe.prototype.transform = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return isNull(value);
            };
        IsNullPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'isNull'
                    },] },
        ];
        return IsNullPipe;
    }());
    var IsUndefinedPipe = (function () {
        function IsUndefinedPipe() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        IsUndefinedPipe.prototype.transform = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return isUndefined(value);
            };
        IsUndefinedPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'isUndefined'
                    },] },
        ];
        return IsUndefinedPipe;
    }());
    var IsNilPipe = (function () {
        function IsNilPipe() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        IsNilPipe.prototype.transform = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return isNil(value);
            };
        IsNilPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'isNil'
                    },] },
        ];
        return IsNilPipe;
    }());
    var IsFunctionPipe = (function () {
        function IsFunctionPipe() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        IsFunctionPipe.prototype.transform = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return isFunction(value);
            };
        IsFunctionPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'isFunction'
                    },] },
        ];
        return IsFunctionPipe;
    }());
    var IsNumberPipe = (function () {
        function IsNumberPipe() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        IsNumberPipe.prototype.transform = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return isNumber(value);
            };
        IsNumberPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'isNumber'
                    },] },
        ];
        return IsNumberPipe;
    }());
    var IsStringPipe = (function () {
        function IsStringPipe() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        IsStringPipe.prototype.transform = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return isString(value);
            };
        IsStringPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'isString'
                    },] },
        ];
        return IsStringPipe;
    }());
    var IsArrayPipe = (function () {
        function IsArrayPipe() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        IsArrayPipe.prototype.transform = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return isArray(value);
            };
        IsArrayPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'isArray'
                    },] },
        ];
        return IsArrayPipe;
    }());
    var IsObjectPipe = (function () {
        function IsObjectPipe() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        IsObjectPipe.prototype.transform = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return isObject(value);
            };
        IsObjectPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'isObject'
                    },] },
        ];
        return IsObjectPipe;
    }());
    var IsDefinedPipe = (function () {
        function IsDefinedPipe() {
        }
        /**
         * @param {?} value
         * @return {?}
         */
        IsDefinedPipe.prototype.transform = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return !isUndefined(value);
            };
        IsDefinedPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'isDefined'
                    },] },
        ];
        return IsDefinedPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgBooleanPipesModule = (function () {
        function NgBooleanPipesModule() {
        }
        NgBooleanPipesModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            IsGreaterPipe,
                            IsGreaterOrEqualPipe,
                            IsLessPipe,
                            IsLessOrEqualPipe,
                            IsEqualPipe,
                            IsNotEqualPipe,
                            IsIdenticalPipe,
                            IsNotIdenticalPipe,
                            IsNilPipe,
                            IsNullPipe,
                            IsUndefinedPipe,
                            IsFunctionPipe,
                            IsNumberPipe,
                            IsStringPipe,
                            IsArrayPipe,
                            IsObjectPipe,
                            IsDefinedPipe
                        ],
                        exports: [
                            IsGreaterPipe,
                            IsGreaterOrEqualPipe,
                            IsLessPipe,
                            IsLessOrEqualPipe,
                            IsEqualPipe,
                            IsNotEqualPipe,
                            IsIdenticalPipe,
                            IsNotIdenticalPipe,
                            IsNilPipe,
                            IsNullPipe,
                            IsUndefinedPipe,
                            IsFunctionPipe,
                            IsNumberPipe,
                            IsStringPipe,
                            IsArrayPipe,
                            IsObjectPipe,
                            IsDefinedPipe
                        ]
                    },] },
        ];
        return NgBooleanPipesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var BytesPipe = (function () {
        function BytesPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} decimal
         * @param {?=} from
         * @param {?=} to
         * @return {?}
         */
        BytesPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} decimal
         * @param {?=} from
         * @param {?=} to
         * @return {?}
         */
            function (input, decimal, from, to) {
                if (decimal === void 0) {
                    decimal = 0;
                }
                if (from === void 0) {
                    from = 'B';
                }
                if (!(isNumberFinite(input) &&
                    isNumberFinite(decimal) &&
                    isInteger(decimal) &&
                    isPositive(decimal))) {
                    return input;
                }
                var /** @type {?} */ bytes = input;
                var /** @type {?} */ unit = from;
                while (unit !== 'B') {
                    bytes *= 1024;
                    unit = /** @type {?} */ ((BytesPipe.formats[unit].prev));
                }
                if (to) {
                    var /** @type {?} */ format = BytesPipe.formats[to];
                    var /** @type {?} */ result = toDecimal(BytesPipe.calculateResult(format, bytes), decimal);
                    return BytesPipe.formatResult(result, to);
                }
                for (var /** @type {?} */ key in BytesPipe.formats) {
                    var /** @type {?} */ format = BytesPipe.formats[key];
                    if (bytes < format.max) {
                        var /** @type {?} */ result = toDecimal(BytesPipe.calculateResult(format, bytes), decimal);
                        return BytesPipe.formatResult(result, key);
                    }
                }
            };
        /**
         * @param {?} result
         * @param {?} unit
         * @return {?}
         */
        BytesPipe.formatResult = /**
         * @param {?} result
         * @param {?} unit
         * @return {?}
         */
            function (result, unit) {
                return result + " " + unit;
            };
        /**
         * @param {?} format
         * @param {?} bytes
         * @return {?}
         */
        BytesPipe.calculateResult = /**
         * @param {?} format
         * @param {?} bytes
         * @return {?}
         */
            function (format, bytes) {
                var /** @type {?} */ prev = format.prev ? BytesPipe.formats[format.prev] : undefined;
                return prev ? bytes / prev.max : bytes;
            };
        BytesPipe.formats = {
            'B': { max: 1024 },
            'KB': { max: Math.pow(1024, 2), prev: 'B' },
            'MB': { max: Math.pow(1024, 3), prev: 'KB' },
            'GB': { max: Math.pow(1024, 4), prev: 'MB' },
            'TB': { max: Number.MAX_SAFE_INTEGER, prev: 'GB' }
        };
        BytesPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'bytes'
                    },] },
        ];
        return BytesPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CeilPipe = (function () {
        function CeilPipe() {
        }
        /**
         * @param {?} value
         * @param {?=} precision
         * @return {?}
         */
        CeilPipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} precision
         * @return {?}
         */
            function (value, precision) {
                if (precision === void 0) {
                    precision = 0;
                }
                if (isString(precision)) {
                    precision = parseInt(precision);
                }
                return createRound('ceil')(value, precision);
            };
        CeilPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'ceil'
                    },] },
        ];
        return CeilPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var FloorPipe = (function () {
        function FloorPipe() {
        }
        /**
         * @param {?} value
         * @param {?=} precision
         * @return {?}
         */
        FloorPipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} precision
         * @return {?}
         */
            function (value, precision) {
                if (precision === void 0) {
                    precision = 0;
                }
                if (isString(precision)) {
                    precision = parseInt(precision);
                }
                return createRound('floor')(value, precision);
            };
        FloorPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'floor'
                    },] },
        ];
        return FloorPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var RoundPipe = (function () {
        function RoundPipe() {
        }
        /**
         * @param {?} value
         * @param {?=} precision
         * @return {?}
         */
        RoundPipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} precision
         * @return {?}
         */
            function (value, precision) {
                if (precision === void 0) {
                    precision = 0;
                }
                if (isString(precision)) {
                    precision = parseInt(precision);
                }
                return createRound('round')(value, precision);
            };
        RoundPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'round'
                    },] },
        ];
        return RoundPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DegreesPipe = (function () {
        function DegreesPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        DegreesPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isNumberFinite(input)) {
                    return 'NaN';
                }
                return (input * 180) / Math.PI;
            };
        DegreesPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'degrees'
                    },] },
        ];
        return DegreesPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var RadiansPipe = (function () {
        function RadiansPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        RadiansPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isNumberFinite(input)) {
                    return 'NaN';
                }
                return (input * Math.PI) / 180;
            };
        RadiansPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'radians'
                    },] },
        ];
        return RadiansPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var RandomPipe = (function () {
        function RandomPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} min
         * @param {?=} max
         * @return {?}
         */
        RandomPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} min
         * @param {?=} max
         * @return {?}
         */
            function (input, min, max) {
                if (min === void 0) {
                    min = 0;
                }
                if (max === void 0) {
                    max = 1;
                }
                if (!isNumberFinite(min) || !isNumberFinite(max)) {
                    return input;
                }
                if (min > max) {
                    max = min;
                    min = 0;
                }
                return Math.random() * (max - min) + min;
            };
        RandomPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'random'
                    },] },
        ];
        return RandomPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SqrtPipe = (function () {
        function SqrtPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        SqrtPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isNumberFinite(input)) {
                    return 'NaN';
                }
                return Math.sqrt(input);
            };
        SqrtPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'sqrt'
                    },] },
        ];
        return SqrtPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var PowPipe = (function () {
        function PowPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} power
         * @return {?}
         */
        PowPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} power
         * @return {?}
         */
            function (input, power) {
                if (power === void 0) {
                    power = 2;
                }
                if (!isNumberFinite(input)) {
                    return 'NaN';
                }
                return Math.pow(input, power);
            };
        PowPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'pow'
                    },] },
        ];
        return PowPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var AbsPipe = (function () {
        function AbsPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        AbsPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isNumberFinite(input)) {
                    return 'NaN';
                }
                return Math.abs(input);
            };
        AbsPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'abs'
                    },] },
        ];
        return AbsPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgMathPipesModule = (function () {
        function NgMathPipesModule() {
        }
        NgMathPipesModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            BytesPipe,
                            CeilPipe,
                            FloorPipe,
                            RoundPipe,
                            DegreesPipe,
                            RadiansPipe,
                            RandomPipe,
                            SqrtPipe,
                            PowPipe,
                            AbsPipe
                        ],
                        exports: [
                            BytesPipe,
                            CeilPipe,
                            FloorPipe,
                            RoundPipe,
                            DegreesPipe,
                            RadiansPipe,
                            RandomPipe,
                            SqrtPipe,
                            PowPipe,
                            AbsPipe
                        ]
                    },] },
        ];
        return NgMathPipesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var KeysPipe = (function () {
        function KeysPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        KeysPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isObject(input)) {
                    return input;
                }
                return Object.keys(input);
            };
        KeysPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'keys' },] },
        ];
        return KeysPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ToArrayPipe = (function () {
        function ToArrayPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        ToArrayPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isObject(input)) {
                    return input;
                }
                return Object.keys(input).map(function (value) { return input[value]; });
            };
        ToArrayPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'toArray' },] },
        ];
        return ToArrayPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DefaultsPipe = (function () {
        function DefaultsPipe() {
        }
        /**
         * @param {?} input
         * @param {?} defaults
         * @return {?}
         */
        DefaultsPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} defaults
         * @return {?}
         */
            function (input, defaults) {
                if (!isObject(defaults)) {
                    return input;
                }
                if (isNil(input)) {
                    return defaults;
                }
                if (isArray(input)) {
                    return input.map(function (item) {
                        if (isObject(item)) {
                            return Object.assign({}, defaults, item);
                        }
                        if (isNil(item)) {
                            return defaults;
                        }
                        return item;
                    });
                }
                if (isObject(input)) {
                    return Object.assign({}, defaults, input);
                }
                return input;
            };
        DefaultsPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'defaults' },] },
        ];
        return DefaultsPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgObjectPipesModule = (function () {
        function NgObjectPipesModule() {
        }
        NgObjectPipesModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            KeysPipe,
                            ToArrayPipe,
                            DefaultsPipe
                        ],
                        exports: [
                            KeysPipe,
                            ToArrayPipe,
                            DefaultsPipe
                        ]
                    },] },
        ];
        return NgObjectPipesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var LeftPadPipe = (function () {
        function LeftPadPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} length
         * @param {?=} character
         * @return {?}
         */
        LeftPadPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} length
         * @param {?=} character
         * @return {?}
         */
            function (input, length, character) {
                if (length === void 0) {
                    length = 0;
                }
                if (character === void 0) {
                    character = ' ';
                }
                if (!isString(input)) {
                    return input;
                }
                return leftPad(input, length, character);
            };
        LeftPadPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'leftpad'
                    },] },
        ];
        return LeftPadPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var MatchPipe = (function () {
        function MatchPipe() {
        }
        /**
         * @param {?} input
         * @param {?} pattern
         * @param {?} flag
         * @return {?}
         */
        MatchPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} pattern
         * @param {?} flag
         * @return {?}
         */
            function (input, pattern, flag) {
                if (!isString(input)) {
                    return input;
                }
                var /** @type {?} */ regexp = pattern instanceof RegExp ? pattern : new RegExp(pattern, flag);
                return input.match(regexp);
            };
        MatchPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'match'
                    },] },
        ];
        return MatchPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var PadPipe = (function () {
        function PadPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} length
         * @param {?=} character
         * @return {?}
         */
        PadPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} length
         * @param {?=} character
         * @return {?}
         */
            function (input, length, character) {
                if (length === void 0) {
                    length = 0;
                }
                if (character === void 0) {
                    character = ' ';
                }
                if (!isString(input)) {
                    return input;
                }
                return pad(input, length, character);
            };
        PadPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'pad'
                    },] },
        ];
        return PadPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ReplacePipe = (function () {
        function ReplacePipe() {
        }
        /**
         * @param {?} input
         * @param {?} pattern
         * @param {?} replacement
         * @return {?}
         */
        ReplacePipe.prototype.transform = /**
         * @param {?} input
         * @param {?} pattern
         * @param {?} replacement
         * @return {?}
         */
            function (input, pattern, replacement) {
                if (!isString(input) || !pattern || !replacement) {
                    return input;
                }
                return input.replace(pattern, replacement);
            };
        ReplacePipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'replace'
                    },] },
        ];
        return ReplacePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var RightPadPipe = (function () {
        function RightPadPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} length
         * @param {?=} character
         * @return {?}
         */
        RightPadPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} length
         * @param {?=} character
         * @return {?}
         */
            function (input, length, character) {
                if (length === void 0) {
                    length = 0;
                }
                if (character === void 0) {
                    character = ' ';
                }
                if (!isString(input)) {
                    return input;
                }
                return rightPad(input, length, character);
            };
        RightPadPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'rightpad'
                    },] },
        ];
        return RightPadPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SplitPipe = (function () {
        function SplitPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} separator
         * @param {?=} limit
         * @return {?}
         */
        SplitPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} separator
         * @param {?=} limit
         * @return {?}
         */
            function (input, separator, limit) {
                if (separator === void 0) {
                    separator = ' ';
                }
                if (!isString(input)) {
                    return input;
                }
                return input.split(separator, limit);
            };
        SplitPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'split'
                    },] },
        ];
        return SplitPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TestPipe = (function () {
        function TestPipe() {
        }
        /**
         * @param {?} input
         * @param {?} pattern
         * @param {?} flag
         * @return {?}
         */
        TestPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} pattern
         * @param {?} flag
         * @return {?}
         */
            function (input, pattern, flag) {
                if (!isString(input) || !pattern) {
                    return input;
                }
                var /** @type {?} */ regexp = pattern instanceof RegExp ? pattern : new RegExp(pattern, flag);
                return regexp.test(input);
            };
        TestPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'test'
                    },] },
        ];
        return TestPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TrimPipe = (function () {
        function TrimPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        TrimPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isString(input)) {
                    return input;
                }
                return input.trim();
            };
        TrimPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'trim'
                    },] },
        ];
        return TrimPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NewlinesPipe = (function () {
        function NewlinesPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        NewlinesPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isString(input)) {
                    return input;
                }
                return input.replace(/(?:\r\n|\r|\n)/g, '<br />');
            };
        NewlinesPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'newlines'
                    },] },
        ];
        return NewlinesPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var CapitalizePipe = (function () {
        function CapitalizePipe() {
        }
        /**
         * @param {?} input
         * @param {?=} all
         * @return {?}
         */
        CapitalizePipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} all
         * @return {?}
         */
            function (input, all) {
                if (all === void 0) {
                    all = false;
                }
                if (!isString(input)) {
                    return input;
                }
                if (!all) {
                    return upperFirst(input.toLowerCase());
                }
                else {
                    return input.toLowerCase()
                        .split(' ')
                        .map(function (value) { return upperFirst(value); })
                        .join(' ');
                }
            };
        CapitalizePipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'capitalize'
                    },] },
        ];
        return CapitalizePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var UpperFirstPipe = (function () {
        function UpperFirstPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        UpperFirstPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isString(input)) {
                    return input;
                }
                return upperFirst(input);
            };
        UpperFirstPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'upperfirst'
                    },] },
        ];
        return UpperFirstPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TemplatePipe = (function () {
        function TemplatePipe() {
        }
        /**
         * @param {?} input
         * @param {...?} args
         * @return {?}
         */
        TemplatePipe.prototype.transform = /**
         * @param {?} input
         * @param {...?} args
         * @return {?}
         */
            function (input) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (!isString(input) || args.length === 0) {
                    return input;
                }
                var /** @type {?} */ template = input;
                for (var /** @type {?} */ i = 0; i < args.length; ++i) {
                    template = template.replace("$" + (i + 1), args[i]);
                }
                return template;
            };
        TemplatePipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'template'
                    },] },
        ];
        return TemplatePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var EncodeURIPipe = (function () {
        function EncodeURIPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        EncodeURIPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isString(input)) {
                    return input;
                }
                return encodeURI(input);
            };
        EncodeURIPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'encodeURI'
                    },] },
        ];
        return EncodeURIPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var EncodeURIComponentPipe = (function () {
        function EncodeURIComponentPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        EncodeURIComponentPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isString(input)) {
                    return input;
                }
                return encodeURIComponent(input);
            };
        EncodeURIComponentPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'encodeURIComponent'
                    },] },
        ];
        return EncodeURIComponentPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DecodeURIPipe = (function () {
        function DecodeURIPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        DecodeURIPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isString(input)) {
                    return input;
                }
                return decodeURI(input);
            };
        DecodeURIPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'decodeURI'
                    },] },
        ];
        return DecodeURIPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var DecodeURIComponentPipe = (function () {
        function DecodeURIComponentPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        DecodeURIComponentPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isString(input)) {
                    return input;
                }
                return decodeURIComponent(input);
            };
        DecodeURIComponentPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'decodeURIComponent'
                    },] },
        ];
        return DecodeURIComponentPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var TruncatePipe = (function () {
        function TruncatePipe() {
        }
        /**
         * @param {?} input
         * @param {?=} length
         * @param {?=} suffix
         * @param {?=} preserve
         * @return {?}
         */
        TruncatePipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} length
         * @param {?=} suffix
         * @param {?=} preserve
         * @return {?}
         */
            function (input, length, suffix, preserve) {
                if (!isString(input)) {
                    return input;
                }
                length = isUndefined(length) ? input.length : length;
                if (input.length <= length) {
                    return input;
                }
                preserve = preserve || false;
                suffix = suffix || '';
                var /** @type {?} */ index = length;
                if (preserve) {
                    if (input.indexOf(' ', length) === -1) {
                        index = input.length;
                    }
                    else {
                        index = input.indexOf(' ', length);
                    }
                }
                return input.substring(0, index) + suffix;
            };
        TruncatePipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'truncate'
                    },] },
        ];
        return TruncatePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var RepeatPipe = (function () {
        function RepeatPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} times
         * @param {?=} characters
         * @return {?}
         */
        RepeatPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} times
         * @param {?=} characters
         * @return {?}
         */
            function (input, times, characters) {
                if (times === void 0) {
                    times = 1;
                }
                if (characters === void 0) {
                    characters = '';
                }
                if (!isString(input)) {
                    return input;
                }
                if (times <= 0) {
                    times = 1;
                }
                var /** @type {?} */ repeated = [input];
                for (var /** @type {?} */ i = 1; i < times; ++i) {
                    repeated.push(input);
                }
                return repeated.join(characters);
            };
        RepeatPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'repeat'
                    },] },
        ];
        return RepeatPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SlugifyPipe = (function () {
        function SlugifyPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        SlugifyPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isString(input)) {
                    return input;
                }
                return (input
                    .toLowerCase()
                    .trim()
                    .replace(/[^a-z0-9\s-]/g, ' ')
                    .replace(/[\s-]+/g, '-'));
            };
        SlugifyPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'slugify' },] },
        ];
        return SlugifyPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var StripTagsPipe = (function () {
        function StripTagsPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        StripTagsPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isString(input) || isUndefined(input))
                    return input;
                return input.replace(/<\S[^><]*>/g, '');
            };
        StripTagsPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'stripTags'
                    },] },
        ];
        return StripTagsPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var LatinizePipe = (function () {
        function LatinizePipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        LatinizePipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isString(input) || isUndefined(input)) {
                    return input;
                }
                var /** @type {?} */ replacementList = [
                    { base: ' ', chars: "\u00A0" },
                    { base: '0', chars: "\u07C0" },
                    { base: 'A', chars: "\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F" },
                    { base: 'AA', chars: "\uA732" },
                    { base: 'AE', chars: "\u00C6\u01FC\u01E2" },
                    { base: 'AO', chars: "\uA734" },
                    { base: 'AU', chars: "\uA736" },
                    { base: 'AV', chars: "\uA738\uA73A" },
                    { base: 'AY', chars: "\uA73C" },
                    { base: 'B', chars: "\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0181" },
                    { base: 'C', chars: "\u24b8\uff23\uA73E\u1E08\u0106\u0043\u0108\u010A\u010C\u00C7\u0187\u023B" },
                    { base: 'D', chars: "\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018A\u0189\u1D05\uA779" },
                    { base: 'Dh', chars: "\u00D0" },
                    { base: 'DZ', chars: "\u01F1\u01C4" },
                    { base: 'Dz', chars: "\u01F2\u01C5" },
                    { base: 'E', chars: "\u025B\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E\u1D07" },
                    { base: 'F', chars: "\uA77C\u24BB\uFF26\u1E1E\u0191\uA77B" },
                    { base: 'G', chars: "\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E\u0262" },
                    { base: 'H', chars: "\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D" },
                    { base: 'I', chars: "\u24BE\uFF29\xCC\xCD\xCE\u0128\u012A\u012C\u0130\xCF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197" },
                    { base: 'J', chars: "\u24BF\uFF2A\u0134\u0248\u0237" },
                    { base: 'K', chars: "\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2" },
                    { base: 'L', chars: "\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780" },
                    { base: 'LJ', chars: "\u01C7" },
                    { base: 'Lj', chars: "\u01C8" },
                    { base: 'M', chars: "\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C\u03FB" },
                    { base: 'N', chars: "\uA7A4\u0220\u24C3\uFF2E\u01F8\u0143\xD1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u019D\uA790\u1D0E" },
                    { base: 'NJ', chars: "\u01CA" },
                    { base: 'Nj', chars: "\u01CB" },
                    { base: 'O', chars: "\u24C4\uFF2F\xD2\xD3\xD4\u1ED2\u1ED0\u1ED6\u1ED4\xD5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\xD6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\xD8\u01FE\u0186\u019F\uA74A\uA74C" },
                    { base: 'OE', chars: "\u0152" },
                    { base: 'OI', chars: "\u01A2" },
                    { base: 'OO', chars: "\uA74E" },
                    { base: 'OU', chars: "\u0222" },
                    { base: 'P', chars: "\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754" },
                    { base: 'Q', chars: "\u24C6\uFF31\uA756\uA758\u024A" },
                    { base: 'R', chars: "\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782" },
                    { base: 'S', chars: "\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784" },
                    { base: 'T', chars: "\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786" },
                    { base: 'Th', chars: "\u00DE" },
                    { base: 'TZ', chars: "\uA728" },
                    { base: 'U', chars: "\u24CA\uFF35\xD9\xDA\xDB\u0168\u1E78\u016A\u1E7A\u016C\xDC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244" },
                    { base: 'V', chars: "\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245" },
                    { base: 'VY', chars: "\uA760" },
                    { base: 'W', chars: "\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72" },
                    { base: 'X', chars: "\u24CD\uFF38\u1E8A\u1E8C" },
                    { base: 'Y', chars: "\u24CE\uFF39\u1EF2\xDD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE" },
                    { base: 'Z', chars: "\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762" },
                    { base: 'a', chars: "\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250\u0251" },
                    { base: 'aa', chars: "\uA733" },
                    { base: 'ae', chars: "\u00E6\u01FD\u01E3" },
                    { base: 'ao', chars: "\uA735" },
                    { base: 'au', chars: "\uA737" },
                    { base: 'av', chars: "\uA739\uA73B" },
                    { base: 'ay', chars: "\uA73D" },
                    { base: 'b', chars: "\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253\u0182" },
                    { base: 'c', chars: "\uFF43\u24D2\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184" },
                    { base: 'd', chars: "\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\u018B\u13E7\u0501\uA7AA" },
                    { base: 'dh', chars: "\u00F0" },
                    { base: 'dz', chars: "\u01F3\u01C6" },
                    { base: 'e', chars: "\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u01DD", }, { base: 'f', chars: "\u24D5\uFF46\u1E1F\u0192" },
                    { base: 'ff', chars: "\uFB00" },
                    { base: 'fi', chars: "\uFB01" },
                    { base: 'fl', chars: "\uFB02" },
                    { base: 'ffi', chars: "\uFB03" },
                    { base: 'ffl', chars: "\uFB04" },
                    { base: 'g', chars: "\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\uA77F\u1D79" },
                    { base: 'h', chars: "\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265" },
                    { base: 'hv', chars: "\u0195" },
                    { base: 'i', chars: "\u24D8\uFF49\xEC\xED\xEE\u0129\u012B\u012D\xEF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131" },
                    { base: 'j', chars: "\u24D9\uFF4A\u0135\u01F0\u0249" },
                    { base: 'k', chars: "\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3" },
                    { base: 'l', chars: "\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747\u026D" },
                    { base: 'lj', chars: "\u01C9" },
                    { base: 'm', chars: "\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F" },
                    { base: 'n', chars: "\u24DD\uFF4E\u01F9\u0144\xF1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5\u043B\u0509" },
                    { base: 'nj', chars: "\u01CC" },
                    { base: 'o', chars: "\u24DE\uFF4F\xF2\xF3\xF4\u1ED3\u1ED1\u1ED7\u1ED5\xF5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\xF6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\xF8\u01FF\uA74B\uA74D\u0275\u0254\u1D11" },
                    { base: 'oe', chars: "\u0153" },
                    { base: 'oi', chars: "\u01A3" },
                    { base: 'oo', chars: "\uA74F" },
                    { base: 'ou', chars: "\u0223" },
                    { base: 'p', chars: "\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755\u03C1" },
                    { base: 'q', chars: "\u24E0\uFF51\u024B\uA757\uA759" },
                    { base: 'r', chars: "\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783" },
                    { base: 's', chars: "\u24E2\uFF53\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B\u0282" },
                    { base: 'ss', chars: "\xDF" },
                    { base: 't', chars: "\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787" },
                    { base: 'th', chars: "\u00FE" },
                    { base: 'tz', chars: "\uA729" },
                    { base: 'u', chars: "\u24E4\uFF55\xF9\xFA\xFB\u0169\u1E79\u016B\u1E7B\u016D\xFC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289" },
                    { base: 'v', chars: "\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C" },
                    { base: 'vy', chars: "\uA761" },
                    { base: 'w', chars: "\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73" },
                    { base: 'x', chars: "\u24E7\uFF58\u1E8B\u1E8D" },
                    { base: 'y', chars: "\u24E8\uFF59\u1EF3\xFD\u0177\u1EF9\u0233\u1E8F\xFF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF" },
                    { base: 'z', chars: "\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763" }
                ];
                var /** @type {?} */ diacriticsMap = {};
                for (var /** @type {?} */ i = 0; i < replacementList.length; i += 1) {
                    var /** @type {?} */ chars = replacementList[i].chars;
                    for (var /** @type {?} */ j = 0; j < chars.length; j += 1) {
                        diacriticsMap[chars[j]] = replacementList[i].base;
                    }
                }
                return input.replace(/[^\u0000-\u007e]/g, function (c) { return diacriticsMap[c] || c; });
            };
        LatinizePipe.decorators = [
            { type: core.Pipe, args: [{ name: 'latinize' },] },
        ];
        return LatinizePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var WrapPipe = (function () {
        function WrapPipe() {
        }
        /**
         * @param {?} input
         * @param {?} wrap
         * @param {?=} ends
         * @return {?}
         */
        WrapPipe.prototype.transform = /**
         * @param {?} input
         * @param {?} wrap
         * @param {?=} ends
         * @return {?}
         */
            function (input, wrap, ends) {
                return (isString(input) && !isUndefined(wrap)) ? [wrap, input, ends || wrap].join('') : input;
            };
        WrapPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'wrap'
                    },] },
        ];
        return WrapPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var WithPipe = (function () {
        function WithPipe() {
        }
        /**
         * @param {?} input
         * @param {?=} start
         * @param {?=} ends
         * @param {?=} csensitive
         * @return {?}
         */
        WithPipe.prototype.transform = /**
         * @param {?} input
         * @param {?=} start
         * @param {?=} ends
         * @param {?=} csensitive
         * @return {?}
         */
            function (input, start, ends, csensitive) {
                if (start === void 0) {
                    start = null;
                }
                if (ends === void 0) {
                    ends = null;
                }
                if (csensitive === void 0) {
                    csensitive = false;
                }
                if (!isString(input) || (isNull(start) && isNull(ends)) || (start == '') || (ends == '')) {
                    return input;
                }
                input = (csensitive) ? input : input.toLowerCase();
                if (!isNull(start) && !isNull(ends)) {
                    var /** @type {?} */ a = !input.indexOf((csensitive) ? start : start.toLowerCase());
                    var /** @type {?} */ b = input.indexOf((csensitive) ? ends : ends.toLowerCase(), (input.length - ends.length)) !== -1;
                    if (a == true && b == true) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
                if (!isNull(start)) {
                    return !input.indexOf((csensitive) ? start : start.toLowerCase());
                }
                if (!isNull(ends)) {
                    var /** @type {?} */ position = input.length - ends.length;
                    return input.indexOf((csensitive) ? ends : ends.toLowerCase(), position) !== -1;
                }
            };
        WithPipe.decorators = [
            { type: core.Pipe, args: [{ name: 'with' },] },
        ];
        return WithPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var ReverseStrPipe = (function () {
        function ReverseStrPipe() {
        }
        /**
         * @param {?} input
         * @return {?}
         */
        ReverseStrPipe.prototype.transform = /**
         * @param {?} input
         * @return {?}
         */
            function (input) {
                if (!isString(input)) {
                    return input;
                }
                return Array.from(input).reverse().join('');
            };
        ReverseStrPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'reverseStr'
                    },] },
        ];
        return ReverseStrPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgStringPipesModule = (function () {
        function NgStringPipesModule() {
        }
        NgStringPipesModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            LeftPadPipe,
                            MatchPipe,
                            PadPipe,
                            ReplacePipe,
                            RightPadPipe,
                            SplitPipe,
                            TestPipe,
                            TrimPipe,
                            NewlinesPipe,
                            CapitalizePipe,
                            UpperFirstPipe,
                            TemplatePipe,
                            EncodeURIPipe,
                            EncodeURIComponentPipe,
                            DecodeURIPipe,
                            DecodeURIComponentPipe,
                            TruncatePipe,
                            RepeatPipe,
                            SlugifyPipe,
                            StripTagsPipe,
                            LatinizePipe,
                            WrapPipe,
                            WithPipe,
                            ReverseStrPipe
                        ],
                        exports: [
                            LeftPadPipe,
                            MatchPipe,
                            PadPipe,
                            ReplacePipe,
                            RightPadPipe,
                            SplitPipe,
                            TestPipe,
                            TrimPipe,
                            NewlinesPipe,
                            CapitalizePipe,
                            UpperFirstPipe,
                            TemplatePipe,
                            EncodeURIPipe,
                            EncodeURIComponentPipe,
                            DecodeURIPipe,
                            DecodeURIComponentPipe,
                            TruncatePipe,
                            RepeatPipe,
                            SlugifyPipe,
                            StripTagsPipe,
                            LatinizePipe,
                            WrapPipe,
                            WithPipe,
                            ReverseStrPipe
                        ]
                    },] },
        ];
        return NgStringPipesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NgPipesModule = (function () {
        function NgPipesModule() {
        }
        NgPipesModule.decorators = [
            { type: core.NgModule, args: [{
                        exports: [
                            NgArrayPipesModule,
                            NgMathPipesModule,
                            NgBooleanPipesModule,
                            NgStringPipesModule,
                            NgObjectPipesModule,
                            NgAggregatePipesModule
                        ]
                    },] },
        ];
        return NgPipesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.NgAggregatePipesModule = NgAggregatePipesModule;
    exports.NgArrayPipesModule = NgArrayPipesModule;
    exports.NgBooleanPipesModule = NgBooleanPipesModule;
    exports.NgMathPipesModule = NgMathPipesModule;
    exports.NgObjectPipesModule = NgObjectPipesModule;
    exports.NgStringPipesModule = NgStringPipesModule;
    exports.NgPipesModule = NgPipesModule;
    exports.GroupByPipe = GroupByPipe;
    exports.MaxPipe = MaxPipe;
    exports.MeanPipe = MeanPipe;
    exports.MinPipe = MinPipe;
    exports.SumPipe = SumPipe;
    exports.EmptyPipe = EmptyPipe;
    exports.HeadPipe = HeadPipe;
    exports.InitialPipe = InitialPipe;
    exports.LastPipe = LastPipe;
    exports.JoinPipe = JoinPipe;
    exports.TailPipe = TailPipe;
    exports.UniqPipe = UniqPipe;
    exports.WithoutPipe = WithoutPipe;
    exports.MapPipe = MapPipe;
    exports.WherePipe = WherePipe;
    exports.FirstOrDefaultPipe = FirstOrDefaultPipe;
    exports.RangePipe = RangePipe;
    exports.PluckPipe = PluckPipe;
    exports.ReversePipe = ReversePipe;
    exports.OrderByPipe = OrderByPipe;
    exports.CountPipe = CountPipe;
    exports.SomePipe = SomePipe;
    exports.EveryPipe = EveryPipe;
    exports.ShufflePipe = ShufflePipe;
    exports.TakePipe = TakePipe;
    exports.DropPipe = DropPipe;
    exports.DeepPipe = DeepPipe;
    exports.ChunkPipe = ChunkPipe;
    exports.FlattenPipe = FlattenPipe;
    exports.IntersectionPipe = IntersectionPipe;
    exports.UnionPipe = UnionPipe;
    exports.TakeWhilePipe = TakeWhilePipe;
    exports.TakeUntilPipe = TakeUntilPipe;
    exports.IsEqualPipe = IsEqualPipe;
    exports.IsGreaterOrEqualPipe = IsGreaterOrEqualPipe;
    exports.IsGreaterPipe = IsGreaterPipe;
    exports.IsLessOrEqualPipe = IsLessOrEqualPipe;
    exports.IsIdenticalPipe = IsIdenticalPipe;
    exports.IsLessPipe = IsLessPipe;
    exports.IsNotEqualPipe = IsNotEqualPipe;
    exports.IsNotIdenticalPipe = IsNotIdenticalPipe;
    exports.IsArrayPipe = IsArrayPipe;
    exports.IsDefinedPipe = IsDefinedPipe;
    exports.IsFunctionPipe = IsFunctionPipe;
    exports.IsNilPipe = IsNilPipe;
    exports.IsNullPipe = IsNullPipe;
    exports.IsNumberPipe = IsNumberPipe;
    exports.IsObjectPipe = IsObjectPipe;
    exports.IsStringPipe = IsStringPipe;
    exports.IsUndefinedPipe = IsUndefinedPipe;
    exports.BytesPipe = BytesPipe;
    exports.CeilPipe = CeilPipe;
    exports.FloorPipe = FloorPipe;
    exports.RoundPipe = RoundPipe;
    exports.DegreesPipe = DegreesPipe;
    exports.RadiansPipe = RadiansPipe;
    exports.RandomPipe = RandomPipe;
    exports.SqrtPipe = SqrtPipe;
    exports.PowPipe = PowPipe;
    exports.AbsPipe = AbsPipe;
    exports.KeysPipe = KeysPipe;
    exports.ToArrayPipe = ToArrayPipe;
    exports.DefaultsPipe = DefaultsPipe;
    exports.LeftPadPipe = LeftPadPipe;
    exports.MatchPipe = MatchPipe;
    exports.PadPipe = PadPipe;
    exports.ReplacePipe = ReplacePipe;
    exports.RightPadPipe = RightPadPipe;
    exports.SplitPipe = SplitPipe;
    exports.TestPipe = TestPipe;
    exports.TrimPipe = TrimPipe;
    exports.NewlinesPipe = NewlinesPipe;
    exports.CapitalizePipe = CapitalizePipe;
    exports.UpperFirstPipe = UpperFirstPipe;
    exports.TemplatePipe = TemplatePipe;
    exports.EncodeURIPipe = EncodeURIPipe;
    exports.EncodeURIComponentPipe = EncodeURIComponentPipe;
    exports.DecodeURIPipe = DecodeURIPipe;
    exports.DecodeURIComponentPipe = DecodeURIComponentPipe;
    exports.TruncatePipe = TruncatePipe;
    exports.RepeatPipe = RepeatPipe;
    exports.SlugifyPipe = SlugifyPipe;
    exports.StripTagsPipe = StripTagsPipe;
    exports.LatinizePipe = LatinizePipe;
    exports.WrapPipe = WrapPipe;
    exports.WithPipe = WithPipe;
    exports.ReverseStrPipe = ReverseStrPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,