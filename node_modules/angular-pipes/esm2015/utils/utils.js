/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
export function isUndefined(value) {
    return typeof value === 'undefined';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isNull(value) {
    return value === null;
}
/**
 * @param {?} value
 * @return {?}
 */
export function isNumber(value) {
    return typeof value === 'number';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isNumberFinite(value) {
    return isNumber(value) && isFinite(value);
}
/**
 * @param {?} value
 * @return {?}
 */
export function isPositive(value) {
    return value >= 0;
}
/**
 * @param {?} value
 * @return {?}
 */
export function isInteger(value) {
    // No rest, is an integer
    return (value % 1) === 0;
}
/**
 * @param {?} value
 * @return {?}
 */
export function isNil(value) {
    return value === null || typeof (value) === 'undefined';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isString(value) {
    return typeof value === 'string';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isObject(value) {
    return typeof value === 'object';
}
/**
 * @param {?} value
 * @return {?}
 */
export function isArray(value) {
    return Array.isArray(value);
}
/**
 * @param {?} value
 * @return {?}
 */
export function isFunction(value) {
    return typeof value === 'function';
}
/**
 * @param {?} value
 * @param {?} decimal
 * @return {?}
 */
export function toDecimal(value, decimal) {
    return Math.round(value * Math.pow(10, decimal)) / Math.pow(10, decimal);
}
/**
 * @param {?} value
 * @return {?}
 */
export function upperFirst(value) {
    return value.slice(0, 1).toUpperCase() + value.slice(1);
}
/**
 * @param {?} method
 * @return {?}
 */
export function createRound(method) {
    // <any>Math to suppress error
    const /** @type {?} */ func = (/** @type {?} */ (Math))[method];
    return function (value, precision = 0) {
        if (typeof value === 'string') {
            throw new TypeError('Rounding method needs a number');
        }
        if (typeof precision !== 'number' || isNaN(precision)) {
            precision = 0;
        }
        if (precision) {
            let /** @type {?} */ pair = `${value}e`.split('e');
            const /** @type {?} */ val = func(`${pair[0]}e` + (+pair[1] + precision));
            pair = `${val}e`.split('e');
            return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(value);
    };
}
/**
 * @param {?} str
 * @param {?=} len
 * @param {?=} ch
 * @return {?}
 */
export function leftPad(str, len = 0, ch = ' ') {
    str = String(str);
    ch = toString(ch);
    let /** @type {?} */ i = -1;
    const /** @type {?} */ length = len - str.length;
    while (++i < length && (str.length + ch.length) <= len) {
        str = ch + str;
    }
    return str;
}
/**
 * @param {?} str
 * @param {?=} len
 * @param {?=} ch
 * @return {?}
 */
export function rightPad(str, len = 0, ch = ' ') {
    str = String(str);
    ch = toString(ch);
    let /** @type {?} */ i = -1;
    const /** @type {?} */ length = len - str.length;
    while (++i < length && (str.length + ch.length) <= len) {
        str += ch;
    }
    return str;
}
/**
 * @param {?} value
 * @return {?}
 */
export function toString(value) {
    return `${value}`;
}
/**
 * @param {?} str
 * @param {?=} len
 * @param {?=} ch
 * @return {?}
 */
export function pad(str, len = 0, ch = ' ') {
    str = String(str);
    ch = toString(ch);
    let /** @type {?} */ i = -1;
    const /** @type {?} */ length = len - str.length;
    let /** @type {?} */ left = true;
    while (++i < length) {
        const /** @type {?} */ l = (str.length + ch.length <= len) ? (str.length + ch.length) : (str.length + 1);
        if (left) {
            str = leftPad(str, l, ch);
        }
        else {
            str = rightPad(str, l, ch);
        }
        left = !left;
    }
    return str;
}
/**
 * @param {?} input
 * @param {?=} index
 * @return {?}
 */
export function flatten(input, index = 0) {
    if (index >= input.length) {
        return input;
    }
    if (isArray(input[index])) {
        return flatten(input.slice(0, index).concat(input[index], input.slice(index + 1)), index);
    }
    return flatten(input, index + 1);
}
/**
 * @param {?} value
 * @param {?} key
 * @return {?}
 */
export function getProperty(value, key) {
    if (isNil(value) || !isObject(value)) {
        return undefined;
    }
    const /** @type {?} */ keys = key.split('.');
    let /** @type {?} */ result = value[/** @type {?} */ ((keys.shift()))];
    for (const /** @type {?} */ key of keys) {
        if (isNil(result) || !isObject(result)) {
            return undefined;
        }
        result = result[key];
    }
    return result;
}
/**
 * @param {?} input
 * @param {?=} initial
 * @return {?}
 */
export function sum(input, initial = 0) {
    return input.reduce((previous, current) => previous + current, initial);
}
/**
 * @param {?} input
 * @return {?}
 */
export function shuffle(input) {
    if (!isArray(input)) {
        return input;
    }
    const /** @type {?} */ copy = [...input];
    for (let /** @type {?} */ i = copy.length; i; --i) {
        const /** @type {?} */ j = Math.floor(Math.random() * i);
        const /** @type {?} */ x = copy[i - 1];
        copy[i - 1] = copy[j];
        copy[j] = x;
    }
    return copy;
}
/**
 * @param {?} collection
 * @param {?} value
 * @return {?}
 */
export function deepIndexOf(collection, value) {
    let /** @type {?} */ index = -1;
    const /** @type {?} */ length = collection.length;
    while (++index < length) {
        if (deepEqual(value, collection[index])) {
            return index;
        }
    }
    return -1;
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
export function deepEqual(a, b) {
    if (a === b) {
        return true;
    }
    if (!(typeof a === 'object' && typeof b === 'object')) {
        return a === b;
    }
    const /** @type {?} */ keysA = Object.keys(a);
    const /** @type {?} */ keysB = Object.keys(b);
    if (keysA.length !== keysB.length) {
        return false;
    }
    // Test for A's keys different from B.
    var /** @type {?} */ hasOwn = Object.prototype.hasOwnProperty;
    for (let /** @type {?} */ i = 0; i < keysA.length; i++) {
        const /** @type {?} */ key = keysA[i];
        if (!hasOwn.call(b, keysA[i]) || !deepEqual(a[key], b[key])) {
            return false;
        }
    }
    return true;
}
/**
 * @param {?} object
 * @return {?}
 */
export function isDeepObject(object) {
    return object.__isDeepObject__;
}
/**
 * @param {?} object
 * @return {?}
 */
export function wrapDeep(object) {
    return new DeepWrapper(object);
}
/**
 * @param {?} object
 * @return {?}
 */
export function unwrapDeep(object) {
    if (isDeepObject(object)) {
        return object.data;
    }
    return object;
}
export class DeepWrapper {
    /**
     * @param {?} data
     */
    constructor(data) {
        this.data = data;
        this.__isDeepObject__ = true;
    }
}
function DeepWrapper_tsickle_Closure_declarations() {
    /** @type {?} */
    DeepWrapper.prototype.__isDeepObject__;
    /** @type {?} */
    DeepWrapper.prototype.data;
}
/**
 * @param {?} input
 * @return {?}
 */
export function count(input) {
    if (!isArray(input) && !isObject(input) && !isString(input)) {
        return input;
    }
    if (isObject(input)) {
        return Object.keys(input).map((value) => input[value]).length;
    }
    return input.length;
}
/**
 * @param {?} input
 * @return {?}
 */
export function empty(input) {
    if (!isArray(input)) {
        return input;
    }
    return input.length === 0;
}
/**
 * @param {?} input
 * @param {?} predicate
 * @return {?}
 */
export function every(input, predicate) {
    if (!isArray(input) || !predicate) {
        return input;
    }
    let /** @type {?} */ result = true;
    let /** @type {?} */ i = -1;
    while (++i < input.length && result) {
        result = predicate(input[i], i, input);
    }
    return result;
}
/**
 * @param {?} input
 * @param {?} predicate
 * @return {?}
 */
export function takeUntil(input, predicate) {
    let /** @type {?} */ i = -1;
    const /** @type {?} */ result = [];
    while (++i < input.length && !predicate(input[i], i, input)) {
        result[i] = input[i];
    }
    return result;
}
/**
 * @param {?} input
 * @param {?} predicate
 * @return {?}
 */
export function takeWhile(input, predicate) {
    return takeUntil(input, (item, index, collection) => !predicate(item, index, collection));
}

//# sourceMappingURL=data:application/json;base64,