/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule } from '@angular/core';
import { LeftPadPipe } from './left-pad.pipe';
import { MatchPipe } from './match.pipe';
import { PadPipe } from './pad.pipe';
import { ReplacePipe } from './replace.pipe';
import { RightPadPipe } from './right-pad.pipe';
import { SplitPipe } from './split.pipe';
import { TestPipe } from './test.pipe';
import { TrimPipe } from './trim.pipe';
import { NewlinesPipe } from './newlines.pipe';
import { CapitalizePipe } from './capitalize.pipe';
import { UpperFirstPipe } from './upperfirst.pipe';
import { TemplatePipe } from './template.pipe';
import { EncodeURIPipe } from './encode-uri.pipe';
import { EncodeURIComponentPipe } from './encode-uri-component.pipe';
import { DecodeURIPipe } from './decode-uri.pipe';
import { DecodeURIComponentPipe } from './decode-uri-component.pipe';
import { TruncatePipe } from './truncate.pipe';
import { RepeatPipe } from './repeat.pipe';
import { SlugifyPipe } from './slugify.pipe';
import { StripTagsPipe } from "./strip-tags.pipe";
import { LatinizePipe } from "./latinize.pipe";
import { WrapPipe } from "./wrap.pipe";
import { WithPipe } from "./with.pipe";
import { ReverseStrPipe } from "./reverse-str.pipe";
var NgStringPipesModule = /** @class */ (function () {
    function NgStringPipesModule() {
    }
    NgStringPipesModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        LeftPadPipe,
                        MatchPipe,
                        PadPipe,
                        ReplacePipe,
                        RightPadPipe,
                        SplitPipe,
                        TestPipe,
                        TrimPipe,
                        NewlinesPipe,
                        CapitalizePipe,
                        UpperFirstPipe,
                        TemplatePipe,
                        EncodeURIPipe,
                        EncodeURIComponentPipe,
                        DecodeURIPipe,
                        DecodeURIComponentPipe,
                        TruncatePipe,
                        RepeatPipe,
                        SlugifyPipe,
                        StripTagsPipe,
                        LatinizePipe,
                        WrapPipe,
                        WithPipe,
                        ReverseStrPipe
                    ],
                    exports: [
                        LeftPadPipe,
                        MatchPipe,
                        PadPipe,
                        ReplacePipe,
                        RightPadPipe,
                        SplitPipe,
                        TestPipe,
                        TrimPipe,
                        NewlinesPipe,
                        CapitalizePipe,
                        UpperFirstPipe,
                        TemplatePipe,
                        EncodeURIPipe,
                        EncodeURIComponentPipe,
                        DecodeURIPipe,
                        DecodeURIComponentPipe,
                        TruncatePipe,
                        RepeatPipe,
                        SlugifyPipe,
                        StripTagsPipe,
                        LatinizePipe,
                        WrapPipe,
                        WithPipe,
                        ReverseStrPipe
                    ]
                },] },
    ];
    return NgStringPipesModule;
}());
export { NgStringPipesModule };
function NgStringPipesModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NgStringPipesModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NgStringPipesModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItcGlwZXMvIiwic291cmNlcyI6WyJzdHJpbmcvc3RyaW5nLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV2QyxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDNUMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUN2QyxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQ25DLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFDOUMsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUN2QyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ3JDLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDckMsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUNoRCxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUNuRSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDaEQsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDbkUsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUNoRCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDN0MsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUNyQyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBQ3JDLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQzs7Ozs7Z0JBR2pELFFBQVEsU0FBQztvQkFDUixZQUFZLEVBQUU7d0JBQ1osV0FBVzt3QkFDWCxTQUFTO3dCQUNULE9BQU87d0JBQ1AsV0FBVzt3QkFDWCxZQUFZO3dCQUNaLFNBQVM7d0JBQ1QsUUFBUTt3QkFDUixRQUFRO3dCQUNSLFlBQVk7d0JBQ1osY0FBYzt3QkFDZCxjQUFjO3dCQUNkLFlBQVk7d0JBQ1osYUFBYTt3QkFDYixzQkFBc0I7d0JBQ3RCLGFBQWE7d0JBQ2Isc0JBQXNCO3dCQUN0QixZQUFZO3dCQUNaLFVBQVU7d0JBQ1YsV0FBVzt3QkFDWCxhQUFhO3dCQUNiLFlBQVk7d0JBQ1osUUFBUTt3QkFDUixRQUFRO3dCQUNSLGNBQWM7cUJBQ2Y7b0JBQ0QsT0FBTyxFQUFFO3dCQUNQLFdBQVc7d0JBQ1gsU0FBUzt3QkFDVCxPQUFPO3dCQUNQLFdBQVc7d0JBQ1gsWUFBWTt3QkFDWixTQUFTO3dCQUNULFFBQVE7d0JBQ1IsUUFBUTt3QkFDUixZQUFZO3dCQUNaLGNBQWM7d0JBQ2QsY0FBYzt3QkFDZCxZQUFZO3dCQUNaLGFBQWE7d0JBQ2Isc0JBQXNCO3dCQUN0QixhQUFhO3dCQUNiLHNCQUFzQjt3QkFDdEIsWUFBWTt3QkFDWixVQUFVO3dCQUNWLFdBQVc7d0JBQ1gsYUFBYTt3QkFDYixZQUFZO3dCQUNaLFFBQVE7d0JBQ1IsUUFBUTt3QkFDUixjQUFjO3FCQUNmO2lCQUNGOzs4QkFqRkQ7O1NBa0ZhLG1CQUFtQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TmdNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHtMZWZ0UGFkUGlwZX0gZnJvbSAnLi9sZWZ0LXBhZC5waXBlJztcclxuaW1wb3J0IHtNYXRjaFBpcGV9IGZyb20gJy4vbWF0Y2gucGlwZSc7XHJcbmltcG9ydCB7UGFkUGlwZX0gZnJvbSAnLi9wYWQucGlwZSc7XHJcbmltcG9ydCB7UmVwbGFjZVBpcGV9IGZyb20gJy4vcmVwbGFjZS5waXBlJztcclxuaW1wb3J0IHtSaWdodFBhZFBpcGV9IGZyb20gJy4vcmlnaHQtcGFkLnBpcGUnO1xyXG5pbXBvcnQge1NwbGl0UGlwZX0gZnJvbSAnLi9zcGxpdC5waXBlJztcclxuaW1wb3J0IHtUZXN0UGlwZX0gZnJvbSAnLi90ZXN0LnBpcGUnO1xyXG5pbXBvcnQge1RyaW1QaXBlfSBmcm9tICcuL3RyaW0ucGlwZSc7XHJcbmltcG9ydCB7TmV3bGluZXNQaXBlfSBmcm9tICcuL25ld2xpbmVzLnBpcGUnO1xyXG5pbXBvcnQge0NhcGl0YWxpemVQaXBlfSBmcm9tICcuL2NhcGl0YWxpemUucGlwZSc7XHJcbmltcG9ydCB7VXBwZXJGaXJzdFBpcGV9IGZyb20gJy4vdXBwZXJmaXJzdC5waXBlJztcclxuaW1wb3J0IHtUZW1wbGF0ZVBpcGV9IGZyb20gJy4vdGVtcGxhdGUucGlwZSc7XHJcbmltcG9ydCB7RW5jb2RlVVJJUGlwZX0gZnJvbSAnLi9lbmNvZGUtdXJpLnBpcGUnO1xyXG5pbXBvcnQge0VuY29kZVVSSUNvbXBvbmVudFBpcGV9IGZyb20gJy4vZW5jb2RlLXVyaS1jb21wb25lbnQucGlwZSc7XHJcbmltcG9ydCB7RGVjb2RlVVJJUGlwZX0gZnJvbSAnLi9kZWNvZGUtdXJpLnBpcGUnO1xyXG5pbXBvcnQge0RlY29kZVVSSUNvbXBvbmVudFBpcGV9IGZyb20gJy4vZGVjb2RlLXVyaS1jb21wb25lbnQucGlwZSc7XHJcbmltcG9ydCB7VHJ1bmNhdGVQaXBlfSBmcm9tICcuL3RydW5jYXRlLnBpcGUnO1xyXG5pbXBvcnQge1JlcGVhdFBpcGV9IGZyb20gJy4vcmVwZWF0LnBpcGUnO1xyXG5pbXBvcnQge1NsdWdpZnlQaXBlfSBmcm9tICcuL3NsdWdpZnkucGlwZSc7XHJcbmltcG9ydCB7U3RyaXBUYWdzUGlwZX0gZnJvbSBcIi4vc3RyaXAtdGFncy5waXBlXCI7XHJcbmltcG9ydCB7TGF0aW5pemVQaXBlfSBmcm9tIFwiLi9sYXRpbml6ZS5waXBlXCI7XHJcbmltcG9ydCB7V3JhcFBpcGV9IGZyb20gXCIuL3dyYXAucGlwZVwiO1xyXG5pbXBvcnQge1dpdGhQaXBlfSBmcm9tIFwiLi93aXRoLnBpcGVcIjtcclxuaW1wb3J0IHtSZXZlcnNlU3RyUGlwZX0gZnJvbSBcIi4vcmV2ZXJzZS1zdHIucGlwZVwiO1xyXG5cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICBMZWZ0UGFkUGlwZSxcclxuICAgIE1hdGNoUGlwZSxcclxuICAgIFBhZFBpcGUsXHJcbiAgICBSZXBsYWNlUGlwZSxcclxuICAgIFJpZ2h0UGFkUGlwZSxcclxuICAgIFNwbGl0UGlwZSxcclxuICAgIFRlc3RQaXBlLFxyXG4gICAgVHJpbVBpcGUsXHJcbiAgICBOZXdsaW5lc1BpcGUsXHJcbiAgICBDYXBpdGFsaXplUGlwZSxcclxuICAgIFVwcGVyRmlyc3RQaXBlLFxyXG4gICAgVGVtcGxhdGVQaXBlLFxyXG4gICAgRW5jb2RlVVJJUGlwZSxcclxuICAgIEVuY29kZVVSSUNvbXBvbmVudFBpcGUsXHJcbiAgICBEZWNvZGVVUklQaXBlLFxyXG4gICAgRGVjb2RlVVJJQ29tcG9uZW50UGlwZSxcclxuICAgIFRydW5jYXRlUGlwZSxcclxuICAgIFJlcGVhdFBpcGUsXHJcbiAgICBTbHVnaWZ5UGlwZSxcclxuICAgIFN0cmlwVGFnc1BpcGUsXHJcbiAgICBMYXRpbml6ZVBpcGUsXHJcbiAgICBXcmFwUGlwZSxcclxuICAgIFdpdGhQaXBlLFxyXG4gICAgUmV2ZXJzZVN0clBpcGVcclxuICBdLFxyXG4gIGV4cG9ydHM6IFtcclxuICAgIExlZnRQYWRQaXBlLFxyXG4gICAgTWF0Y2hQaXBlLFxyXG4gICAgUGFkUGlwZSxcclxuICAgIFJlcGxhY2VQaXBlLFxyXG4gICAgUmlnaHRQYWRQaXBlLFxyXG4gICAgU3BsaXRQaXBlLFxyXG4gICAgVGVzdFBpcGUsXHJcbiAgICBUcmltUGlwZSxcclxuICAgIE5ld2xpbmVzUGlwZSxcclxuICAgIENhcGl0YWxpemVQaXBlLFxyXG4gICAgVXBwZXJGaXJzdFBpcGUsXHJcbiAgICBUZW1wbGF0ZVBpcGUsXHJcbiAgICBFbmNvZGVVUklQaXBlLFxyXG4gICAgRW5jb2RlVVJJQ29tcG9uZW50UGlwZSxcclxuICAgIERlY29kZVVSSVBpcGUsXHJcbiAgICBEZWNvZGVVUklDb21wb25lbnRQaXBlLFxyXG4gICAgVHJ1bmNhdGVQaXBlLFxyXG4gICAgUmVwZWF0UGlwZSxcclxuICAgIFNsdWdpZnlQaXBlLFxyXG4gICAgU3RyaXBUYWdzUGlwZSxcclxuICAgIExhdGluaXplUGlwZSxcclxuICAgIFdyYXBQaXBlLFxyXG4gICAgV2l0aFBpcGUsXHJcbiAgICBSZXZlcnNlU3RyUGlwZVxyXG4gIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIE5nU3RyaW5nUGlwZXNNb2R1bGUge1xyXG59XHJcbiJdfQ==