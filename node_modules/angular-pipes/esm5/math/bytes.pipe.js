/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Pipe } from '@angular/core';
import { isNumberFinite, isPositive, isInteger, toDecimal } from '../utils/utils';
var BytesPipe = /** @class */ (function () {
    function BytesPipe() {
    }
    /**
     * @param {?} input
     * @param {?=} decimal
     * @param {?=} from
     * @param {?=} to
     * @return {?}
     */
    BytesPipe.prototype.transform = /**
     * @param {?} input
     * @param {?=} decimal
     * @param {?=} from
     * @param {?=} to
     * @return {?}
     */
    function (input, decimal, from, to) {
        if (decimal === void 0) { decimal = 0; }
        if (from === void 0) { from = 'B'; }
        if (!(isNumberFinite(input) &&
            isNumberFinite(decimal) &&
            isInteger(decimal) &&
            isPositive(decimal))) {
            return input;
        }
        var /** @type {?} */ bytes = input;
        var /** @type {?} */ unit = from;
        while (unit !== 'B') {
            bytes *= 1024;
            unit = /** @type {?} */ ((BytesPipe.formats[unit].prev));
        }
        if (to) {
            var /** @type {?} */ format = BytesPipe.formats[to];
            var /** @type {?} */ result = toDecimal(BytesPipe.calculateResult(format, bytes), decimal);
            return BytesPipe.formatResult(result, to);
        }
        for (var /** @type {?} */ key in BytesPipe.formats) {
            var /** @type {?} */ format = BytesPipe.formats[key];
            if (bytes < format.max) {
                var /** @type {?} */ result = toDecimal(BytesPipe.calculateResult(format, bytes), decimal);
                return BytesPipe.formatResult(result, key);
            }
        }
    };
    /**
     * @param {?} result
     * @param {?} unit
     * @return {?}
     */
    BytesPipe.formatResult = /**
     * @param {?} result
     * @param {?} unit
     * @return {?}
     */
    function (result, unit) {
        return result + " " + unit;
    };
    /**
     * @param {?} format
     * @param {?} bytes
     * @return {?}
     */
    BytesPipe.calculateResult = /**
     * @param {?} format
     * @param {?} bytes
     * @return {?}
     */
    function (format, bytes) {
        var /** @type {?} */ prev = format.prev ? BytesPipe.formats[format.prev] : undefined;
        return prev ? bytes / prev.max : bytes;
    };
    BytesPipe.formats = {
        'B': { max: 1024 },
        'KB': { max: Math.pow(1024, 2), prev: 'B' },
        'MB': { max: Math.pow(1024, 3), prev: 'KB' },
        'GB': { max: Math.pow(1024, 4), prev: 'MB' },
        'TB': { max: Number.MAX_SAFE_INTEGER, prev: 'GB' }
    };
    BytesPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'bytes'
                },] },
    ];
    return BytesPipe;
}());
export { BytesPipe };
function BytesPipe_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    BytesPipe.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    BytesPipe.ctorParameters;
    /** @type {?} */
    BytesPipe.formats;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnl0ZXMucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItcGlwZXMvIiwic291cmNlcyI6WyJtYXRoL2J5dGVzLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7Ozs7Ozs7SUFtQjlFLDZCQUFTOzs7Ozs7O0lBQVQsVUFBVSxLQUFVLEVBQUUsT0FBbUIsRUFBRSxJQUFvQixFQUFFLEVBQWE7UUFBeEQsd0JBQUEsRUFBQSxXQUFtQjtRQUFFLHFCQUFBLEVBQUEsVUFBb0I7UUFFM0QsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUM7WUFDbkIsY0FBYyxDQUFDLE9BQU8sQ0FBQztZQUN2QixTQUFTLENBQUMsT0FBTyxDQUFDO1lBQ2xCLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzQixNQUFNLENBQUMsS0FBSyxDQUFDO1NBQ2hCO1FBRUQscUJBQUksS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNsQixxQkFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLE9BQU8sSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO1lBQ2xCLEtBQUssSUFBSSxJQUFJLENBQUM7WUFDZCxJQUFJLHNCQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUM7U0FDeEM7UUFFRCxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ0wscUJBQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFckMscUJBQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUU1RSxNQUFNLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDN0M7UUFFRCxHQUFHLENBQUMsQ0FBQyxxQkFBTSxHQUFHLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDbEMscUJBQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdEMsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUVyQixxQkFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUU1RSxNQUFNLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7YUFDOUM7U0FDSjtLQUNKOzs7Ozs7SUFFTSxzQkFBWTs7Ozs7SUFBbkIsVUFBb0IsTUFBYyxFQUFFLElBQVk7UUFDNUMsTUFBTSxDQUFJLE1BQU0sU0FBSSxJQUFNLENBQUM7S0FDOUI7Ozs7OztJQUVNLHlCQUFlOzs7OztJQUF0QixVQUF1QixNQUF3QyxFQUFFLEtBQWE7UUFDMUUscUJBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFDdEUsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztLQUMxQzt3QkFuRHFFO1FBQ2xFLEdBQUcsRUFBRSxFQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUM7UUFDaEIsSUFBSSxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUM7UUFDekMsSUFBSSxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUM7UUFDMUMsSUFBSSxFQUFFLEVBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUM7UUFDMUMsSUFBSSxFQUFFLEVBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFDO0tBQ25EOztnQkFYSixJQUFJLFNBQUM7b0JBQ0YsSUFBSSxFQUFFLE9BQU87aUJBQ2hCOztvQkFSRDs7U0FTYSxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBpc051bWJlckZpbml0ZSwgaXNQb3NpdGl2ZSwgaXNJbnRlZ2VyLCB0b0RlY2ltYWwgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG5leHBvcnQgdHlwZSBCeXRlVW5pdCA9ICdCJyB8ICdLQicgfCAnTUInIHwgJ0dCJyB8ICdUQic7XHJcblxyXG5cclxuQFBpcGUoe1xyXG4gICAgbmFtZTogJ2J5dGVzJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgQnl0ZXNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcblxyXG4gICAgc3RhdGljIGZvcm1hdHM6IHsgW2tleTogc3RyaW5nXTogeyBtYXg6IG51bWJlciwgcHJldj86IEJ5dGVVbml0IH0gfSA9IHtcclxuICAgICAgICAnQic6IHttYXg6IDEwMjR9LFxyXG4gICAgICAgICdLQic6IHttYXg6IE1hdGgucG93KDEwMjQsIDIpLCBwcmV2OiAnQid9LFxyXG4gICAgICAgICdNQic6IHttYXg6IE1hdGgucG93KDEwMjQsIDMpLCBwcmV2OiAnS0InfSxcclxuICAgICAgICAnR0InOiB7bWF4OiBNYXRoLnBvdygxMDI0LCA0KSwgcHJldjogJ01CJ30sXHJcbiAgICAgICAgJ1RCJzoge21heDogTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIsIHByZXY6ICdHQid9XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICB0cmFuc2Zvcm0oaW5wdXQ6IGFueSwgZGVjaW1hbDogbnVtYmVyID0gMCwgZnJvbTogQnl0ZVVuaXQgPSAnQicsIHRvPzogQnl0ZVVuaXQpOiBhbnkge1xyXG5cclxuICAgICAgICBpZiAoIShpc051bWJlckZpbml0ZShpbnB1dCkgJiZcclxuICAgICAgICAgICAgICAgIGlzTnVtYmVyRmluaXRlKGRlY2ltYWwpICYmXHJcbiAgICAgICAgICAgICAgICBpc0ludGVnZXIoZGVjaW1hbCkgJiZcclxuICAgICAgICAgICAgICAgIGlzUG9zaXRpdmUoZGVjaW1hbCkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBieXRlcyA9IGlucHV0O1xyXG4gICAgICAgIGxldCB1bml0ID0gZnJvbTtcclxuICAgICAgICB3aGlsZSAodW5pdCAhPT0gJ0InKSB7XHJcbiAgICAgICAgICAgIGJ5dGVzICo9IDEwMjQ7XHJcbiAgICAgICAgICAgIHVuaXQgPSBCeXRlc1BpcGUuZm9ybWF0c1t1bml0XS5wcmV2ITtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0bykge1xyXG4gICAgICAgICAgICBjb25zdCBmb3JtYXQgPSBCeXRlc1BpcGUuZm9ybWF0c1t0b107XHJcblxyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0b0RlY2ltYWwoQnl0ZXNQaXBlLmNhbGN1bGF0ZVJlc3VsdChmb3JtYXQsIGJ5dGVzKSwgZGVjaW1hbCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gQnl0ZXNQaXBlLmZvcm1hdFJlc3VsdChyZXN1bHQsIHRvKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIEJ5dGVzUGlwZS5mb3JtYXRzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdCA9IEJ5dGVzUGlwZS5mb3JtYXRzW2tleV07XHJcbiAgICAgICAgICAgIGlmIChieXRlcyA8IGZvcm1hdC5tYXgpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0b0RlY2ltYWwoQnl0ZXNQaXBlLmNhbGN1bGF0ZVJlc3VsdChmb3JtYXQsIGJ5dGVzKSwgZGVjaW1hbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEJ5dGVzUGlwZS5mb3JtYXRSZXN1bHQocmVzdWx0LCBrZXkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBmb3JtYXRSZXN1bHQocmVzdWx0OiBudW1iZXIsIHVuaXQ6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIGAke3Jlc3VsdH0gJHt1bml0fWA7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNhbGN1bGF0ZVJlc3VsdChmb3JtYXQ6IHsgbWF4OiBudW1iZXIsIHByZXY/OiBCeXRlVW5pdCB9LCBieXRlczogbnVtYmVyKSB7XHJcbiAgICAgICAgY29uc3QgcHJldiA9IGZvcm1hdC5wcmV2ID8gQnl0ZXNQaXBlLmZvcm1hdHNbZm9ybWF0LnByZXZdIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIHJldHVybiBwcmV2ID8gYnl0ZXMgLyBwcmV2Lm1heCA6IGJ5dGVzO1xyXG4gICAgfVxyXG59Il19