import { Pipe, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
function isUndefined(value) {
    return typeof value === 'undefined';
}
/**
 * @param {?} value
 * @return {?}
 */
function isNull(value) {
    return value === null;
}
/**
 * @param {?} value
 * @return {?}
 */
function isNumber(value) {
    return typeof value === 'number';
}
/**
 * @param {?} value
 * @return {?}
 */
function isNumberFinite(value) {
    return isNumber(value) && isFinite(value);
}
/**
 * @param {?} value
 * @return {?}
 */
function isPositive(value) {
    return value >= 0;
}
/**
 * @param {?} value
 * @return {?}
 */
function isInteger(value) {
    // No rest, is an integer
    return (value % 1) === 0;
}
/**
 * @param {?} value
 * @return {?}
 */
function isNil(value) {
    return value === null || typeof (value) === 'undefined';
}
/**
 * @param {?} value
 * @return {?}
 */
function isString(value) {
    return typeof value === 'string';
}
/**
 * @param {?} value
 * @return {?}
 */
function isObject(value) {
    return typeof value === 'object';
}
/**
 * @param {?} value
 * @return {?}
 */
function isArray(value) {
    return Array.isArray(value);
}
/**
 * @param {?} value
 * @return {?}
 */
function isFunction(value) {
    return typeof value === 'function';
}
/**
 * @param {?} value
 * @param {?} decimal
 * @return {?}
 */
function toDecimal(value, decimal) {
    return Math.round(value * Math.pow(10, decimal)) / Math.pow(10, decimal);
}
/**
 * @param {?} value
 * @return {?}
 */
function upperFirst(value) {
    return value.slice(0, 1).toUpperCase() + value.slice(1);
}
/**
 * @param {?} method
 * @return {?}
 */
function createRound(method) {
    // <any>Math to suppress error
    const /** @type {?} */ func = (/** @type {?} */ (Math))[method];
    return function (value, precision = 0) {
        if (typeof value === 'string') {
            throw new TypeError('Rounding method needs a number');
        }
        if (typeof precision !== 'number' || isNaN(precision)) {
            precision = 0;
        }
        if (precision) {
            let /** @type {?} */ pair = `${value}e`.split('e');
            const /** @type {?} */ val = func(`${pair[0]}e` + (+pair[1] + precision));
            pair = `${val}e`.split('e');
            return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(value);
    };
}
/**
 * @param {?} str
 * @param {?=} len
 * @param {?=} ch
 * @return {?}
 */
function leftPad(str, len = 0, ch = ' ') {
    str = String(str);
    ch = toString(ch);
    let /** @type {?} */ i = -1;
    const /** @type {?} */ length = len - str.length;
    while (++i < length && (str.length + ch.length) <= len) {
        str = ch + str;
    }
    return str;
}
/**
 * @param {?} str
 * @param {?=} len
 * @param {?=} ch
 * @return {?}
 */
function rightPad(str, len = 0, ch = ' ') {
    str = String(str);
    ch = toString(ch);
    let /** @type {?} */ i = -1;
    const /** @type {?} */ length = len - str.length;
    while (++i < length && (str.length + ch.length) <= len) {
        str += ch;
    }
    return str;
}
/**
 * @param {?} value
 * @return {?}
 */
function toString(value) {
    return `${value}`;
}
/**
 * @param {?} str
 * @param {?=} len
 * @param {?=} ch
 * @return {?}
 */
function pad(str, len = 0, ch = ' ') {
    str = String(str);
    ch = toString(ch);
    let /** @type {?} */ i = -1;
    const /** @type {?} */ length = len - str.length;
    let /** @type {?} */ left = true;
    while (++i < length) {
        const /** @type {?} */ l = (str.length + ch.length <= len) ? (str.length + ch.length) : (str.length + 1);
        if (left) {
            str = leftPad(str, l, ch);
        }
        else {
            str = rightPad(str, l, ch);
        }
        left = !left;
    }
    return str;
}
/**
 * @param {?} input
 * @param {?=} index
 * @return {?}
 */
function flatten(input, index = 0) {
    if (index >= input.length) {
        return input;
    }
    if (isArray(input[index])) {
        return flatten(input.slice(0, index).concat(input[index], input.slice(index + 1)), index);
    }
    return flatten(input, index + 1);
}
/**
 * @param {?} value
 * @param {?} key
 * @return {?}
 */
function getProperty(value, key) {
    if (isNil(value) || !isObject(value)) {
        return undefined;
    }
    const /** @type {?} */ keys = key.split('.');
    let /** @type {?} */ result = value[/** @type {?} */ ((keys.shift()))];
    for (const /** @type {?} */ key of keys) {
        if (isNil(result) || !isObject(result)) {
            return undefined;
        }
        result = result[key];
    }
    return result;
}
/**
 * @param {?} input
 * @param {?=} initial
 * @return {?}
 */
function sum(input, initial = 0) {
    return input.reduce((previous, current) => previous + current, initial);
}
/**
 * @param {?} input
 * @return {?}
 */
function shuffle(input) {
    if (!isArray(input)) {
        return input;
    }
    const /** @type {?} */ copy = [...input];
    for (let /** @type {?} */ i = copy.length; i; --i) {
        const /** @type {?} */ j = Math.floor(Math.random() * i);
        const /** @type {?} */ x = copy[i - 1];
        copy[i - 1] = copy[j];
        copy[j] = x;
    }
    return copy;
}
/**
 * @param {?} collection
 * @param {?} value
 * @return {?}
 */
function deepIndexOf(collection, value) {
    let /** @type {?} */ index = -1;
    const /** @type {?} */ length = collection.length;
    while (++index < length) {
        if (deepEqual(value, collection[index])) {
            return index;
        }
    }
    return -1;
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function deepEqual(a, b) {
    if (a === b) {
        return true;
    }
    if (!(typeof a === 'object' && typeof b === 'object')) {
        return a === b;
    }
    const /** @type {?} */ keysA = Object.keys(a);
    const /** @type {?} */ keysB = Object.keys(b);
    if (keysA.length !== keysB.length) {
        return false;
    }
    // Test for A's keys different from B.
    var /** @type {?} */ hasOwn = Object.prototype.hasOwnProperty;
    for (let /** @type {?} */ i = 0; i < keysA.length; i++) {
        const /** @type {?} */ key = keysA[i];
        if (!hasOwn.call(b, keysA[i]) || !deepEqual(a[key], b[key])) {
            return false;
        }
    }
    return true;
}
/**
 * @param {?} object
 * @return {?}
 */
function isDeepObject(object) {
    return object.__isDeepObject__;
}
/**
 * @param {?} object
 * @return {?}
 */
function wrapDeep(object) {
    return new DeepWrapper(object);
}
/**
 * @param {?} object
 * @return {?}
 */
function unwrapDeep(object) {
    if (isDeepObject(object)) {
        return object.data;
    }
    return object;
}
class DeepWrapper {
    /**
     * @param {?} data
     */
    constructor(data) {
        this.data = data;
        this.__isDeepObject__ = true;
    }
}
/**
 * @param {?} input
 * @return {?}
 */
function count(input) {
    if (!isArray(input) && !isObject(input) && !isString(input)) {
        return input;
    }
    if (isObject(input)) {
        return Object.keys(input).map((value) => input[value]).length;
    }
    return input.length;
}
/**
 * @param {?} input
 * @return {?}
 */
function empty(input) {
    if (!isArray(input)) {
        return input;
    }
    return input.length === 0;
}
/**
 * @param {?} input
 * @param {?} predicate
 * @return {?}
 */
function every(input, predicate) {
    if (!isArray(input) || !predicate) {
        return input;
    }
    let /** @type {?} */ result = true;
    let /** @type {?} */ i = -1;
    while (++i < input.length && result) {
        result = predicate(input[i], i, input);
    }
    return result;
}
/**
 * @param {?} input
 * @param {?} predicate
 * @return {?}
 */
function takeUntil(input, predicate) {
    let /** @type {?} */ i = -1;
    const /** @type {?} */ result = [];
    while (++i < input.length && !predicate(input[i], i, input)) {
        result[i] = input[i];
    }
    return result;
}
/**
 * @param {?} input
 * @param {?} predicate
 * @return {?}
 */
function takeWhile(input, predicate) {
    return takeUntil(input, (item, index, collection) => !predicate(item, index, collection));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class GroupByPipe {
    /**
     * @param {?} input
     * @param {?} prop
     * @return {?}
     */
    transform(input, prop) {
        if (!isArray(input)) {
            return input;
        }
        const /** @type {?} */ arr = {};
        for (const /** @type {?} */ value of input) {
            const /** @type {?} */ field = getProperty(value, prop);
            if (isUndefined(arr[field])) {
                arr[field] = [];
            }
            arr[field].push(value);
        }
        return Object.keys(arr).map(key => ({ key, 'value': arr[key] }));
    }
}
GroupByPipe.decorators = [
    { type: Pipe, args: [{
                name: 'groupBy'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MaxPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isArray(input)) {
            return input;
        }
        if (input.length === 0) {
            return undefined;
        }
        let /** @type {?} */ max = input[0];
        input.forEach((value) => {
            if (max < value) {
                max = value;
            }
        });
        return max;
    }
}
MaxPipe.decorators = [
    { type: Pipe, args: [{
                name: 'max'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MeanPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isArray(input)) {
            return input;
        }
        const /** @type {?} */ count$$1 = input.length;
        if (count$$1 === 0) {
            return undefined;
        }
        return sum(input) / count$$1;
    }
}
MeanPipe.decorators = [
    { type: Pipe, args: [{
                name: 'mean'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MinPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isArray(input)) {
            return input;
        }
        if (input.length === 0) {
            return undefined;
        }
        let /** @type {?} */ min = input[0];
        input.forEach((value) => {
            if (min > value) {
                min = value;
            }
        });
        return min;
    }
}
MinPipe.decorators = [
    { type: Pipe, args: [{
                name: 'min'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SumPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        return !isArray(input) ? input : sum(input);
    }
}
SumPipe.decorators = [
    { type: Pipe, args: [{ name: 'sum' },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgAggregatePipesModule {
}
NgAggregatePipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    GroupByPipe,
                    MaxPipe,
                    MeanPipe,
                    MinPipe,
                    SumPipe
                ],
                exports: [
                    GroupByPipe,
                    MaxPipe,
                    MeanPipe,
                    MinPipe,
                    SumPipe
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EmptyPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        return empty(input);
    }
}
EmptyPipe.decorators = [
    { type: Pipe, args: [{
                name: 'empty'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class HeadPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isArray(input)) {
            return input;
        }
        // Will return undefined if length is 0
        return input[0];
    }
}
HeadPipe.decorators = [
    { type: Pipe, args: [{
                name: 'head'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class InitialPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isArray(input)) {
            return input;
        }
        return input.slice(0, input.length - 1);
    }
}
InitialPipe.decorators = [
    { type: Pipe, args: [{
                name: 'initial'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LastPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isArray(input)) {
            return input;
        }
        // Returns undefined if empty
        return input[input.length - 1];
    }
}
LastPipe.decorators = [
    { type: Pipe, args: [{
                name: 'last'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class JoinPipe {
    /**
     * @param {?} input
     * @param {?=} character
     * @return {?}
     */
    transform(input, character = '') {
        if (!isArray(input)) {
            return input;
        }
        return input.join(character);
    }
}
JoinPipe.decorators = [
    { type: Pipe, args: [{
                name: 'join'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TailPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isArray(input)) {
            return input;
        }
        return input.slice(1, input.length);
    }
}
TailPipe.decorators = [
    { type: Pipe, args: [{
                name: 'tail'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class UniqPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isArray(input) && !isDeepObject(input)) {
            return input;
        }
        if (isDeepObject(input)) {
            const /** @type {?} */ unwrappedInput = unwrapDeep(input);
            if (!isArray(unwrappedInput)) {
                return unwrappedInput;
            }
            return unwrappedInput.filter((value, index) => deepIndexOf(unwrappedInput, value) === index);
        }
        return input.filter((value, index) => input.indexOf(value) === index);
    }
}
UniqPipe.decorators = [
    { type: Pipe, args: [{
                name: 'uniq'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class WithoutPipe {
    /**
     * @param {?} input
     * @param {...?} args
     * @return {?}
     */
    transform(input, ...args) {
        if (!isArray(input) && !isDeepObject(input)) {
            return input;
        }
        if (isDeepObject(input)) {
            const /** @type {?} */ unwrappedInput = unwrapDeep(input);
            if (!isArray(unwrappedInput)) {
                return unwrappedInput;
            }
            return unwrappedInput.filter((value) => deepIndexOf(args, value) === -1);
        }
        return input.filter((value) => args.indexOf(value) === -1);
    }
}
WithoutPipe.decorators = [
    { type: Pipe, args: [{
                name: 'without'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MapPipe {
    /**
     * @param {?} input
     * @param {?} fn
     * @return {?}
     */
    transform(input, fn) {
        if (!isArray(input) || !fn) {
            return input;
        }
        return input.map(fn);
    }
}
MapPipe.decorators = [
    { type: Pipe, args: [{
                name: 'map'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class WherePipe {
    /**
     * Support a function or a value or the shorthand ['key', value] like the lodash shorthand.
     * @param {?} input
     * @param {?} fn
     * @return {?}
     */
    transform(input, fn) {
        if (!isArray(input)) {
            return input;
        }
        if (isFunction(fn)) {
            return input.filter(fn);
        }
        else if (isArray(fn)) {
            const [key, value] = fn;
            return input.filter((item) => getProperty(item, key) === value);
        }
        else if (fn) {
            return input.filter((item) => item === fn);
        }
        else {
            return input;
        }
    }
}
WherePipe.decorators = [
    { type: Pipe, args: [{
                name: 'where'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FirstOrDefaultPipe {
    /**
     * @param {?} input
     * @param {?} predicate
     * @param {?=} defaultValue
     * @return {?}
     */
    static find(input, predicate, defaultValue) {
        let /** @type {?} */ found = false;
        let /** @type {?} */ result;
        let /** @type {?} */ i = -1;
        while (!found && ++i < input.length) {
            found = predicate(input[i], i, input);
        }
        if (found) {
            result = input[i];
        }
        if (typeof result === 'undefined' && typeof defaultValue !== 'undefined') {
            result = defaultValue;
        }
        return result;
    }
    /**
     * @param {?} input
     * @param {?} predicate
     * @param {?=} defaultValue
     * @return {?}
     */
    transform(input, predicate, defaultValue) {
        if (!isArray(input)) {
            return input;
        }
        if (isFunction(predicate)) {
            return FirstOrDefaultPipe.find(input, /** @type {?} */ (predicate), defaultValue);
        }
        else if (isArray(predicate)) {
            const [key, value] = /** @type {?} */ (predicate);
            return FirstOrDefaultPipe.find(input, (item) => getProperty(item, key) === value, defaultValue);
        }
        else if (predicate) {
            return FirstOrDefaultPipe.find(input, (item) => item === /** @type {?} */ (predicate), defaultValue);
        }
        else {
            return input;
        }
    }
}
FirstOrDefaultPipe.decorators = [
    { type: Pipe, args: [{
                name: 'firstOrDefault'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class RangePipe {
    /**
     * @param {?} _input
     * @param {?=} size
     * @param {?=} start
     * @param {?=} step
     * @return {?}
     */
    transform(_input, size = 0, start = 1, step = 1) {
        const /** @type {?} */ range = [];
        for (let /** @type {?} */ length = 0; length < size; ++length) {
            range.push(start);
            start += step;
        }
        return range;
    }
}
RangePipe.decorators = [
    { type: Pipe, args: [{
                name: 'range'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class PluckPipe {
    /**
     * @param {?} input
     * @param {?} key
     * @return {?}
     */
    transform(input, key) {
        if (!isArray(input) || !key) {
            return input;
        }
        return input.map((value) => {
            return getProperty(value, key);
        });
    }
}
PluckPipe.decorators = [
    { type: Pipe, args: [{
                name: 'pluck'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ReversePipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isArray(input)) {
            return input;
        }
        return [...input].reverse();
    }
}
ReversePipe.decorators = [
    { type: Pipe, args: [{
                name: 'reverse'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class OrderByPipe {
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    static _orderBy(a, b) {
        if (a instanceof Date && b instanceof Date) {
            return (a < b) ? -1 : (a > b) ? 1 : 0;
        }
        const /** @type {?} */ floatA = parseFloat(a);
        const /** @type {?} */ floatB = parseFloat(b);
        if (typeof a === 'string' && typeof b === 'string' && (isNaN(floatA) || isNaN(floatB))) {
            const /** @type {?} */ lowerA = a.toLowerCase();
            const /** @type {?} */ lowerB = b.toLowerCase();
            return (lowerA < lowerB) ? -1 : (lowerA > lowerB) ? 1 : 0;
        }
        return (floatA < floatB) ? -1 : (floatA > floatB) ? 1 : 0;
    }
    /**
     * @param {?} input
     * @param {?=} config
     * @return {?}
     */
    transform(input, config = '+') {
        if (!isArray(input)) {
            return input;
        }
        const /** @type {?} */ configIsArray = isArray(config);
        // If config === 'param' OR ['param']
        if (!configIsArray || (configIsArray && config.length === 1)) {
            const /** @type {?} */ propertyToCheck = configIsArray ? config[0] : config;
            const /** @type {?} */ first = propertyToCheck.substr(0, 1);
            const /** @type {?} */ desc = (first === '-'); // First character is '-'
            // Basic array (if only + or - is present)
            if (!propertyToCheck || propertyToCheck === '-' || propertyToCheck === '+') {
                return [...input].sort((a, b) => {
                    const /** @type {?} */ comparator = OrderByPipe._orderBy(a, b);
                    return desc ? -comparator : comparator;
                });
            }
            else {
                // If contains + or -, substring the property
                const /** @type {?} */ property = (first === '+' || desc) ? propertyToCheck.substr(1) : propertyToCheck;
                return [...input].sort((a, b) => {
                    const /** @type {?} */ comparator = OrderByPipe._orderBy(a[property], b[property]);
                    return desc ? -comparator : comparator;
                });
            }
        }
        else {
            // Config is an array of property
            return [...input].sort((a, b) => {
                for (let /** @type {?} */ i = 0; i < config.length; ++i) {
                    const /** @type {?} */ first = config[i].substr(0, 1);
                    const /** @type {?} */ desc = (first === '-');
                    const /** @type {?} */ property = (first === '+' || desc) ? config[i].substr(1) : config[i];
                    const /** @type {?} */ comparator = OrderByPipe._orderBy(a[property], b[property]);
                    const /** @type {?} */ comparison = desc ? -comparator : comparator;
                    if (comparison !== 0) {
                        return comparison;
                    }
                }
                return 0;
            });
        }
    }
}
OrderByPipe.decorators = [
    { type: Pipe, args: [{
                name: 'orderBy'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class CountPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        return count(input);
    }
}
CountPipe.decorators = [
    { type: Pipe, args: [{
                name: 'count'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SomePipe {
    /**
     * @param {?} input
     * @param {?} predicate
     * @return {?}
     */
    transform(input, predicate) {
        if (!isArray(input) || !predicate) {
            return input;
        }
        let /** @type {?} */ result = false;
        let /** @type {?} */ i = -1;
        while (++i < input.length && !result) {
            result = predicate(input[i], i, input);
        }
        return result;
    }
}
SomePipe.decorators = [
    { type: Pipe, args: [{
                name: 'some'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EveryPipe {
    /**
     * @param {?} input
     * @param {?} predicate
     * @return {?}
     */
    transform(input, predicate) {
        return every(input, predicate);
    }
}
EveryPipe.decorators = [
    { type: Pipe, args: [{
                name: 'every'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ShufflePipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        return shuffle(input);
    }
}
ShufflePipe.decorators = [
    { type: Pipe, args: [{
                name: 'shuffle'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TakePipe {
    /**
     * @param {?} input
     * @param {?=} quantity
     * @return {?}
     */
    transform(input, quantity) {
        if (!isArray(input)) {
            return input;
        }
        return input.slice(0, quantity || 1);
    }
}
TakePipe.decorators = [
    { type: Pipe, args: [{
                name: 'take'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DropPipe {
    /**
     * @param {?} input
     * @param {?=} quantity
     * @return {?}
     */
    transform(input, quantity) {
        if (!isArray(input)) {
            return input;
        }
        return input.slice(quantity || 1, input.lenth);
    }
}
DropPipe.decorators = [
    { type: Pipe, args: [{
                name: 'drop'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DeepPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        if (isDeepObject(value)) {
            return value;
        }
        return wrapDeep(value);
    }
}
DeepPipe.decorators = [
    { type: Pipe, args: [{
                name: 'deep'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ChunkPipe {
    /**
     * @param {?} input
     * @param {?=} size
     * @return {?}
     */
    transform(input, size = 1) {
        if (!isArray(input)) {
            return input;
        }
        return [].concat.apply([], input.map((_elem, i) => {
            return i % size ? [] : [input.slice(i, i + size)];
        }));
    }
}
ChunkPipe.decorators = [
    { type: Pipe, args: [{
                name: 'chunk'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FlattenPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        const /** @type {?} */ isDeep = isDeepObject(input);
        if (!isArray(input) && !isDeep) {
            return input;
        }
        if (isDeep) {
            const /** @type {?} */ unwrapped = unwrapDeep(input);
            if (!isArray(unwrapped)) {
                return unwrapped;
            }
            return flatten(unwrapped, 0);
        }
        return [].concat.apply([], input);
    }
}
FlattenPipe.decorators = [
    { type: Pipe, args: [{ name: 'flatten' },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class IntersectionPipe {
    /**
     * @param {?=} a
     * @param {?=} b
     * @return {?}
     */
    transform(a, b) {
        if ((!isArray(a) && !isDeepObject(a)) || !isArray(b)) {
            return [];
        }
        if (isDeepObject(a)) {
            const /** @type {?} */ unwrapped = unwrapDeep(a);
            if (!isArray(unwrapped)) {
                return [];
            }
            return unwrapped.reduce((intersection, value) => intersection.concat((deepIndexOf(b, value) !== -1 && deepIndexOf(intersection, value) === -1) ? value : []), []);
        }
        return a.reduce((intersection, value) => intersection.concat((b.indexOf(value) !== -1 && intersection.indexOf(value) === -1) ? value : []), []);
    }
}
IntersectionPipe.decorators = [
    { type: Pipe, args: [{
                name: 'intersection'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class UnionPipe {
    /**
     * @param {?=} a
     * @param {?=} b
     * @return {?}
     */
    transform(a, b) {
        if ((!isArray(a) && !isDeepObject(a)) || !isArray(b)) {
            return [];
        }
        if (isDeepObject(a)) {
            const /** @type {?} */ unwrapped = unwrapDeep(a);
            if (!isArray(unwrapped)) {
                return [];
            }
            return []
                .concat(unwrapped)
                .concat(b)
                .filter((value, index, input) => deepIndexOf(input, value) === index);
        }
        return [].concat(a).concat(b).filter((value, index, input) => input.indexOf(value) === index);
    }
}
UnionPipe.decorators = [
    { type: Pipe, args: [{
                name: 'union'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TakeWhilePipe {
    /**
     * @param {?} input
     * @param {?=} predicate
     * @return {?}
     */
    transform(input, predicate) {
        if (!isArray(input) || isNil(predicate)) {
            return input;
        }
        return takeWhile(input, predicate);
    }
}
TakeWhilePipe.decorators = [
    { type: Pipe, args: [{
                name: 'takeWhile'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TakeUntilPipe {
    /**
     * @param {?} input
     * @param {?=} predicate
     * @return {?}
     */
    transform(input, predicate) {
        if (!isArray(input) || isNil(predicate)) {
            return input;
        }
        return takeUntil(input, predicate);
    }
}
TakeUntilPipe.decorators = [
    { type: Pipe, args: [{
                name: 'takeUntil'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgArrayPipesModule {
}
NgArrayPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    EmptyPipe,
                    HeadPipe,
                    InitialPipe,
                    LastPipe,
                    JoinPipe,
                    TailPipe,
                    UniqPipe,
                    WithoutPipe,
                    MapPipe,
                    WherePipe,
                    RangePipe,
                    PluckPipe,
                    ReversePipe,
                    OrderByPipe,
                    CountPipe,
                    SomePipe,
                    EveryPipe,
                    ShufflePipe,
                    TakePipe,
                    DropPipe,
                    DeepPipe,
                    ChunkPipe,
                    FlattenPipe,
                    FirstOrDefaultPipe,
                    IntersectionPipe,
                    UnionPipe,
                    TakeWhilePipe,
                    TakeUntilPipe
                ],
                exports: [
                    EmptyPipe,
                    HeadPipe,
                    InitialPipe,
                    LastPipe,
                    JoinPipe,
                    TailPipe,
                    UniqPipe,
                    WithoutPipe,
                    MapPipe,
                    WherePipe,
                    RangePipe,
                    PluckPipe,
                    ReversePipe,
                    OrderByPipe,
                    CountPipe,
                    SomePipe,
                    EveryPipe,
                    ShufflePipe,
                    TakePipe,
                    DropPipe,
                    DeepPipe,
                    ChunkPipe,
                    FlattenPipe,
                    FirstOrDefaultPipe,
                    IntersectionPipe,
                    UnionPipe,
                    TakeWhilePipe,
                    TakeUntilPipe
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class IsGreaterPipe {
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    transform(first, second) {
        return first > second;
    }
}
IsGreaterPipe.decorators = [
    { type: Pipe, args: [{
                name: 'greater'
            },] },
];
class IsGreaterOrEqualPipe {
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    transform(first, second) {
        return first >= second;
    }
}
IsGreaterOrEqualPipe.decorators = [
    { type: Pipe, args: [{
                name: 'greaterOrEqual'
            },] },
];
class IsLessPipe {
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    transform(first, second) {
        return first < second;
    }
}
IsLessPipe.decorators = [
    { type: Pipe, args: [{
                name: 'less'
            },] },
];
class IsLessOrEqualPipe {
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    transform(first, second) {
        return first <= second;
    }
}
IsLessOrEqualPipe.decorators = [
    { type: Pipe, args: [{
                name: 'lessOrEqual'
            },] },
];
class IsEqualPipe {
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    transform(first, second) {
        return first == second;
    }
}
IsEqualPipe.decorators = [
    { type: Pipe, args: [{
                name: 'equal'
            },] },
];
class IsNotEqualPipe {
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    transform(first, second) {
        return first != second;
    }
}
IsNotEqualPipe.decorators = [
    { type: Pipe, args: [{
                name: 'notEqual'
            },] },
];
class IsIdenticalPipe {
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    transform(first, second) {
        return first === second;
    }
}
IsIdenticalPipe.decorators = [
    { type: Pipe, args: [{
                name: 'identical'
            },] },
];
class IsNotIdenticalPipe {
    /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    transform(first, second) {
        return first !== second;
    }
}
IsNotIdenticalPipe.decorators = [
    { type: Pipe, args: [{
                name: 'notIdentical'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class IsNullPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return isNull(value);
    }
}
IsNullPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isNull'
            },] },
];
class IsUndefinedPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return isUndefined(value);
    }
}
IsUndefinedPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isUndefined'
            },] },
];
class IsNilPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return isNil(value);
    }
}
IsNilPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isNil'
            },] },
];
class IsFunctionPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return isFunction(value);
    }
}
IsFunctionPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isFunction'
            },] },
];
class IsNumberPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return isNumber(value);
    }
}
IsNumberPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isNumber'
            },] },
];
class IsStringPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return isString(value);
    }
}
IsStringPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isString'
            },] },
];
class IsArrayPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return isArray(value);
    }
}
IsArrayPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isArray'
            },] },
];
class IsObjectPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return isObject(value);
    }
}
IsObjectPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isObject'
            },] },
];
class IsDefinedPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return !isUndefined(value);
    }
}
IsDefinedPipe.decorators = [
    { type: Pipe, args: [{
                name: 'isDefined'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgBooleanPipesModule {
}
NgBooleanPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    IsGreaterPipe,
                    IsGreaterOrEqualPipe,
                    IsLessPipe,
                    IsLessOrEqualPipe,
                    IsEqualPipe,
                    IsNotEqualPipe,
                    IsIdenticalPipe,
                    IsNotIdenticalPipe,
                    IsNilPipe,
                    IsNullPipe,
                    IsUndefinedPipe,
                    IsFunctionPipe,
                    IsNumberPipe,
                    IsStringPipe,
                    IsArrayPipe,
                    IsObjectPipe,
                    IsDefinedPipe
                ],
                exports: [
                    IsGreaterPipe,
                    IsGreaterOrEqualPipe,
                    IsLessPipe,
                    IsLessOrEqualPipe,
                    IsEqualPipe,
                    IsNotEqualPipe,
                    IsIdenticalPipe,
                    IsNotIdenticalPipe,
                    IsNilPipe,
                    IsNullPipe,
                    IsUndefinedPipe,
                    IsFunctionPipe,
                    IsNumberPipe,
                    IsStringPipe,
                    IsArrayPipe,
                    IsObjectPipe,
                    IsDefinedPipe
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class BytesPipe {
    /**
     * @param {?} input
     * @param {?=} decimal
     * @param {?=} from
     * @param {?=} to
     * @return {?}
     */
    transform(input, decimal = 0, from = 'B', to) {
        if (!(isNumberFinite(input) &&
            isNumberFinite(decimal) &&
            isInteger(decimal) &&
            isPositive(decimal))) {
            return input;
        }
        let /** @type {?} */ bytes = input;
        let /** @type {?} */ unit = from;
        while (unit !== 'B') {
            bytes *= 1024;
            unit = /** @type {?} */ ((BytesPipe.formats[unit].prev));
        }
        if (to) {
            const /** @type {?} */ format = BytesPipe.formats[to];
            const /** @type {?} */ result = toDecimal(BytesPipe.calculateResult(format, bytes), decimal);
            return BytesPipe.formatResult(result, to);
        }
        for (const /** @type {?} */ key in BytesPipe.formats) {
            const /** @type {?} */ format = BytesPipe.formats[key];
            if (bytes < format.max) {
                const /** @type {?} */ result = toDecimal(BytesPipe.calculateResult(format, bytes), decimal);
                return BytesPipe.formatResult(result, key);
            }
        }
    }
    /**
     * @param {?} result
     * @param {?} unit
     * @return {?}
     */
    static formatResult(result, unit) {
        return `${result} ${unit}`;
    }
    /**
     * @param {?} format
     * @param {?} bytes
     * @return {?}
     */
    static calculateResult(format, bytes) {
        const /** @type {?} */ prev = format.prev ? BytesPipe.formats[format.prev] : undefined;
        return prev ? bytes / prev.max : bytes;
    }
}
BytesPipe.formats = {
    'B': { max: 1024 },
    'KB': { max: Math.pow(1024, 2), prev: 'B' },
    'MB': { max: Math.pow(1024, 3), prev: 'KB' },
    'GB': { max: Math.pow(1024, 4), prev: 'MB' },
    'TB': { max: Number.MAX_SAFE_INTEGER, prev: 'GB' }
};
BytesPipe.decorators = [
    { type: Pipe, args: [{
                name: 'bytes'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class CeilPipe {
    /**
     * @param {?} value
     * @param {?=} precision
     * @return {?}
     */
    transform(value, precision = 0) {
        if (isString(precision)) {
            precision = parseInt(precision);
        }
        return createRound('ceil')(value, precision);
    }
}
CeilPipe.decorators = [
    { type: Pipe, args: [{
                name: 'ceil'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FloorPipe {
    /**
     * @param {?} value
     * @param {?=} precision
     * @return {?}
     */
    transform(value, precision = 0) {
        if (isString(precision)) {
            precision = parseInt(precision);
        }
        return createRound('floor')(value, precision);
    }
}
FloorPipe.decorators = [
    { type: Pipe, args: [{
                name: 'floor'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class RoundPipe {
    /**
     * @param {?} value
     * @param {?=} precision
     * @return {?}
     */
    transform(value, precision = 0) {
        if (isString(precision)) {
            precision = parseInt(precision);
        }
        return createRound('round')(value, precision);
    }
}
RoundPipe.decorators = [
    { type: Pipe, args: [{
                name: 'round'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DegreesPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isNumberFinite(input)) {
            return 'NaN';
        }
        return (input * 180) / Math.PI;
    }
}
DegreesPipe.decorators = [
    { type: Pipe, args: [{
                name: 'degrees'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class RadiansPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isNumberFinite(input)) {
            return 'NaN';
        }
        return (input * Math.PI) / 180;
    }
}
RadiansPipe.decorators = [
    { type: Pipe, args: [{
                name: 'radians'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class RandomPipe {
    /**
     * @param {?} input
     * @param {?=} min
     * @param {?=} max
     * @return {?}
     */
    transform(input, min = 0, max = 1) {
        if (!isNumberFinite(min) || !isNumberFinite(max)) {
            return input;
        }
        if (min > max) {
            max = min;
            min = 0;
        }
        return Math.random() * (max - min) + min;
    }
}
RandomPipe.decorators = [
    { type: Pipe, args: [{
                name: 'random'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SqrtPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isNumberFinite(input)) {
            return 'NaN';
        }
        return Math.sqrt(input);
    }
}
SqrtPipe.decorators = [
    { type: Pipe, args: [{
                name: 'sqrt'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class PowPipe {
    /**
     * @param {?} input
     * @param {?=} power
     * @return {?}
     */
    transform(input, power = 2) {
        if (!isNumberFinite(input)) {
            return 'NaN';
        }
        return Math.pow(input, power);
    }
}
PowPipe.decorators = [
    { type: Pipe, args: [{
                name: 'pow'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AbsPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isNumberFinite(input)) {
            return 'NaN';
        }
        return Math.abs(input);
    }
}
AbsPipe.decorators = [
    { type: Pipe, args: [{
                name: 'abs'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgMathPipesModule {
}
NgMathPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    BytesPipe,
                    CeilPipe,
                    FloorPipe,
                    RoundPipe,
                    DegreesPipe,
                    RadiansPipe,
                    RandomPipe,
                    SqrtPipe,
                    PowPipe,
                    AbsPipe
                ],
                exports: [
                    BytesPipe,
                    CeilPipe,
                    FloorPipe,
                    RoundPipe,
                    DegreesPipe,
                    RadiansPipe,
                    RandomPipe,
                    SqrtPipe,
                    PowPipe,
                    AbsPipe
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class KeysPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isObject(input)) {
            return input;
        }
        return Object.keys(input);
    }
}
KeysPipe.decorators = [
    { type: Pipe, args: [{ name: 'keys' },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ToArrayPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isObject(input)) {
            return input;
        }
        return Object.keys(input).map((value) => input[value]);
    }
}
ToArrayPipe.decorators = [
    { type: Pipe, args: [{ name: 'toArray' },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DefaultsPipe {
    /**
     * @param {?} input
     * @param {?} defaults
     * @return {?}
     */
    transform(input, defaults) {
        if (!isObject(defaults)) {
            return input;
        }
        if (isNil(input)) {
            return defaults;
        }
        if (isArray(input)) {
            return input.map((item) => {
                if (isObject(item)) {
                    return Object.assign({}, defaults, item);
                }
                if (isNil(item)) {
                    return defaults;
                }
                return item;
            });
        }
        if (isObject(input)) {
            return Object.assign({}, defaults, input);
        }
        return input;
    }
}
DefaultsPipe.decorators = [
    { type: Pipe, args: [{ name: 'defaults' },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgObjectPipesModule {
}
NgObjectPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    KeysPipe,
                    ToArrayPipe,
                    DefaultsPipe
                ],
                exports: [
                    KeysPipe,
                    ToArrayPipe,
                    DefaultsPipe
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LeftPadPipe {
    /**
     * @param {?} input
     * @param {?=} length
     * @param {?=} character
     * @return {?}
     */
    transform(input, length = 0, character = ' ') {
        if (!isString(input)) {
            return input;
        }
        return leftPad(input, length, character);
    }
}
LeftPadPipe.decorators = [
    { type: Pipe, args: [{
                name: 'leftpad'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MatchPipe {
    /**
     * @param {?} input
     * @param {?} pattern
     * @param {?} flag
     * @return {?}
     */
    transform(input, pattern, flag) {
        if (!isString(input)) {
            return input;
        }
        const /** @type {?} */ regexp = pattern instanceof RegExp ? pattern : new RegExp(pattern, flag);
        return input.match(regexp);
    }
}
MatchPipe.decorators = [
    { type: Pipe, args: [{
                name: 'match'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class PadPipe {
    /**
     * @param {?} input
     * @param {?=} length
     * @param {?=} character
     * @return {?}
     */
    transform(input, length = 0, character = ' ') {
        if (!isString(input)) {
            return input;
        }
        return pad(input, length, character);
    }
}
PadPipe.decorators = [
    { type: Pipe, args: [{
                name: 'pad'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ReplacePipe {
    /**
     * @param {?} input
     * @param {?} pattern
     * @param {?} replacement
     * @return {?}
     */
    transform(input, pattern, replacement) {
        if (!isString(input) || !pattern || !replacement) {
            return input;
        }
        return input.replace(pattern, replacement);
    }
}
ReplacePipe.decorators = [
    { type: Pipe, args: [{
                name: 'replace'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class RightPadPipe {
    /**
     * @param {?} input
     * @param {?=} length
     * @param {?=} character
     * @return {?}
     */
    transform(input, length = 0, character = ' ') {
        if (!isString(input)) {
            return input;
        }
        return rightPad(input, length, character);
    }
}
RightPadPipe.decorators = [
    { type: Pipe, args: [{
                name: 'rightpad'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SplitPipe {
    /**
     * @param {?} input
     * @param {?=} separator
     * @param {?=} limit
     * @return {?}
     */
    transform(input, separator = ' ', limit) {
        if (!isString(input)) {
            return input;
        }
        return input.split(separator, limit);
    }
}
SplitPipe.decorators = [
    { type: Pipe, args: [{
                name: 'split'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TestPipe {
    /**
     * @param {?} input
     * @param {?} pattern
     * @param {?} flag
     * @return {?}
     */
    transform(input, pattern, flag) {
        if (!isString(input) || !pattern) {
            return input;
        }
        const /** @type {?} */ regexp = pattern instanceof RegExp ? pattern : new RegExp(pattern, flag);
        return regexp.test(input);
    }
}
TestPipe.decorators = [
    { type: Pipe, args: [{
                name: 'test'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TrimPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isString(input)) {
            return input;
        }
        return input.trim();
    }
}
TrimPipe.decorators = [
    { type: Pipe, args: [{
                name: 'trim'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NewlinesPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isString(input)) {
            return input;
        }
        return input.replace(/(?:\r\n|\r|\n)/g, '<br />');
    }
}
NewlinesPipe.decorators = [
    { type: Pipe, args: [{
                name: 'newlines'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class CapitalizePipe {
    /**
     * @param {?} input
     * @param {?=} all
     * @return {?}
     */
    transform(input, all = false) {
        if (!isString(input)) {
            return input;
        }
        if (!all) {
            return upperFirst(input.toLowerCase());
        }
        else {
            return input.toLowerCase()
                .split(' ')
                .map((value) => upperFirst(value))
                .join(' ');
        }
    }
}
CapitalizePipe.decorators = [
    { type: Pipe, args: [{
                name: 'capitalize'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class UpperFirstPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isString(input)) {
            return input;
        }
        return upperFirst(input);
    }
}
UpperFirstPipe.decorators = [
    { type: Pipe, args: [{
                name: 'upperfirst'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TemplatePipe {
    /**
     * @param {?} input
     * @param {...?} args
     * @return {?}
     */
    transform(input, ...args) {
        if (!isString(input) || args.length === 0) {
            return input;
        }
        let /** @type {?} */ template = input;
        for (let /** @type {?} */ i = 0; i < args.length; ++i) {
            template = template.replace(`$${i + 1}`, args[i]);
        }
        return template;
    }
}
TemplatePipe.decorators = [
    { type: Pipe, args: [{
                name: 'template'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EncodeURIPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isString(input)) {
            return input;
        }
        return encodeURI(input);
    }
}
EncodeURIPipe.decorators = [
    { type: Pipe, args: [{
                name: 'encodeURI'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class EncodeURIComponentPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isString(input)) {
            return input;
        }
        return encodeURIComponent(input);
    }
}
EncodeURIComponentPipe.decorators = [
    { type: Pipe, args: [{
                name: 'encodeURIComponent'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DecodeURIPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isString(input)) {
            return input;
        }
        return decodeURI(input);
    }
}
DecodeURIPipe.decorators = [
    { type: Pipe, args: [{
                name: 'decodeURI'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DecodeURIComponentPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isString(input)) {
            return input;
        }
        return decodeURIComponent(input);
    }
}
DecodeURIComponentPipe.decorators = [
    { type: Pipe, args: [{
                name: 'decodeURIComponent'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TruncatePipe {
    /**
     * @param {?} input
     * @param {?=} length
     * @param {?=} suffix
     * @param {?=} preserve
     * @return {?}
     */
    transform(input, length, suffix, preserve) {
        if (!isString(input)) {
            return input;
        }
        length = isUndefined(length) ? input.length : length;
        if (input.length <= length) {
            return input;
        }
        preserve = preserve || false;
        suffix = suffix || '';
        let /** @type {?} */ index = length;
        if (preserve) {
            if (input.indexOf(' ', length) === -1) {
                index = input.length;
            }
            else {
                index = input.indexOf(' ', length);
            }
        }
        return input.substring(0, index) + suffix;
    }
}
TruncatePipe.decorators = [
    { type: Pipe, args: [{
                name: 'truncate'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class RepeatPipe {
    /**
     * @param {?} input
     * @param {?=} times
     * @param {?=} characters
     * @return {?}
     */
    transform(input, times = 1, characters = '') {
        if (!isString(input)) {
            return input;
        }
        if (times <= 0) {
            times = 1;
        }
        const /** @type {?} */ repeated = [input];
        for (let /** @type {?} */ i = 1; i < times; ++i) {
            repeated.push(input);
        }
        return repeated.join(characters);
    }
}
RepeatPipe.decorators = [
    { type: Pipe, args: [{
                name: 'repeat'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SlugifyPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isString(input)) {
            return input;
        }
        return (input
            .toLowerCase()
            .trim()
            .replace(/[^a-z0-9\s-]/g, ' ')
            .replace(/[\s-]+/g, '-'));
    }
}
SlugifyPipe.decorators = [
    { type: Pipe, args: [{ name: 'slugify' },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class StripTagsPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isString(input) || isUndefined(input))
            return input;
        return input.replace(/<\S[^><]*>/g, '');
    }
}
StripTagsPipe.decorators = [
    { type: Pipe, args: [{
                name: 'stripTags'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LatinizePipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isString(input) || isUndefined(input)) {
            return input;
        }
        let /** @type {?} */ replacementList = [
            { base: ' ', chars: "\u00A0" },
            { base: '0', chars: "\u07C0" },
            { base: 'A', chars: "\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F" },
            { base: 'AA', chars: "\uA732" },
            { base: 'AE', chars: "\u00C6\u01FC\u01E2" },
            { base: 'AO', chars: "\uA734" },
            { base: 'AU', chars: "\uA736" },
            { base: 'AV', chars: "\uA738\uA73A" },
            { base: 'AY', chars: "\uA73C" },
            { base: 'B', chars: "\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0181" },
            { base: 'C', chars: "\u24b8\uff23\uA73E\u1E08\u0106\u0043\u0108\u010A\u010C\u00C7\u0187\u023B" },
            { base: 'D', chars: "\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018A\u0189\u1D05\uA779" },
            { base: 'Dh', chars: "\u00D0" },
            { base: 'DZ', chars: "\u01F1\u01C4" },
            { base: 'Dz', chars: "\u01F2\u01C5" },
            { base: 'E', chars: "\u025B\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E\u1D07" },
            { base: 'F', chars: "\uA77C\u24BB\uFF26\u1E1E\u0191\uA77B" },
            { base: 'G', chars: "\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E\u0262" },
            { base: 'H', chars: "\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D" },
            { base: 'I', chars: "\u24BE\uFF29\xCC\xCD\xCE\u0128\u012A\u012C\u0130\xCF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197" },
            { base: 'J', chars: "\u24BF\uFF2A\u0134\u0248\u0237" },
            { base: 'K', chars: "\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2" },
            { base: 'L', chars: "\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780" },
            { base: 'LJ', chars: "\u01C7" },
            { base: 'Lj', chars: "\u01C8" },
            { base: 'M', chars: "\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C\u03FB" },
            { base: 'N', chars: "\uA7A4\u0220\u24C3\uFF2E\u01F8\u0143\xD1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u019D\uA790\u1D0E" },
            { base: 'NJ', chars: "\u01CA" },
            { base: 'Nj', chars: "\u01CB" },
            { base: 'O', chars: "\u24C4\uFF2F\xD2\xD3\xD4\u1ED2\u1ED0\u1ED6\u1ED4\xD5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\xD6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\xD8\u01FE\u0186\u019F\uA74A\uA74C" },
            { base: 'OE', chars: "\u0152" },
            { base: 'OI', chars: "\u01A2" },
            { base: 'OO', chars: "\uA74E" },
            { base: 'OU', chars: "\u0222" },
            { base: 'P', chars: "\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754" },
            { base: 'Q', chars: "\u24C6\uFF31\uA756\uA758\u024A" },
            { base: 'R', chars: "\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782" },
            { base: 'S', chars: "\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784" },
            { base: 'T', chars: "\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786" },
            { base: 'Th', chars: "\u00DE" },
            { base: 'TZ', chars: "\uA728" },
            { base: 'U', chars: "\u24CA\uFF35\xD9\xDA\xDB\u0168\u1E78\u016A\u1E7A\u016C\xDC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244" },
            { base: 'V', chars: "\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245" },
            { base: 'VY', chars: "\uA760" },
            { base: 'W', chars: "\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72" },
            { base: 'X', chars: "\u24CD\uFF38\u1E8A\u1E8C" },
            { base: 'Y', chars: "\u24CE\uFF39\u1EF2\xDD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE" },
            { base: 'Z', chars: "\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762" },
            { base: 'a', chars: "\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250\u0251" },
            { base: 'aa', chars: "\uA733" },
            { base: 'ae', chars: "\u00E6\u01FD\u01E3" },
            { base: 'ao', chars: "\uA735" },
            { base: 'au', chars: "\uA737" },
            { base: 'av', chars: "\uA739\uA73B" },
            { base: 'ay', chars: "\uA73D" },
            { base: 'b', chars: "\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253\u0182" },
            { base: 'c', chars: "\uFF43\u24D2\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184" },
            { base: 'd', chars: "\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\u018B\u13E7\u0501\uA7AA" },
            { base: 'dh', chars: "\u00F0" },
            { base: 'dz', chars: "\u01F3\u01C6" },
            { base: 'e', chars: "\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u01DD", }, { base: 'f', chars: "\u24D5\uFF46\u1E1F\u0192" },
            { base: 'ff', chars: "\uFB00" },
            { base: 'fi', chars: "\uFB01" },
            { base: 'fl', chars: "\uFB02" },
            { base: 'ffi', chars: "\uFB03" },
            { base: 'ffl', chars: "\uFB04" },
            { base: 'g', chars: "\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\uA77F\u1D79" },
            { base: 'h', chars: "\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265" },
            { base: 'hv', chars: "\u0195" },
            { base: 'i', chars: "\u24D8\uFF49\xEC\xED\xEE\u0129\u012B\u012D\xEF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131" },
            { base: 'j', chars: "\u24D9\uFF4A\u0135\u01F0\u0249" },
            { base: 'k', chars: "\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3" },
            { base: 'l', chars: "\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747\u026D" },
            { base: 'lj', chars: "\u01C9" },
            { base: 'm', chars: "\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F" },
            { base: 'n', chars: "\u24DD\uFF4E\u01F9\u0144\xF1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5\u043B\u0509" },
            { base: 'nj', chars: "\u01CC" },
            { base: 'o', chars: "\u24DE\uFF4F\xF2\xF3\xF4\u1ED3\u1ED1\u1ED7\u1ED5\xF5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\xF6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\xF8\u01FF\uA74B\uA74D\u0275\u0254\u1D11" },
            { base: 'oe', chars: "\u0153" },
            { base: 'oi', chars: "\u01A3" },
            { base: 'oo', chars: "\uA74F" },
            { base: 'ou', chars: "\u0223" },
            { base: 'p', chars: "\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755\u03C1" },
            { base: 'q', chars: "\u24E0\uFF51\u024B\uA757\uA759" },
            { base: 'r', chars: "\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783" },
            { base: 's', chars: "\u24E2\uFF53\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B\u0282" },
            { base: 'ss', chars: "\xDF" },
            { base: 't', chars: "\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787" },
            { base: 'th', chars: "\u00FE" },
            { base: 'tz', chars: "\uA729" },
            { base: 'u', chars: "\u24E4\uFF55\xF9\xFA\xFB\u0169\u1E79\u016B\u1E7B\u016D\xFC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289" },
            { base: 'v', chars: "\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C" },
            { base: 'vy', chars: "\uA761" },
            { base: 'w', chars: "\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73" },
            { base: 'x', chars: "\u24E7\uFF58\u1E8B\u1E8D" },
            { base: 'y', chars: "\u24E8\uFF59\u1EF3\xFD\u0177\u1EF9\u0233\u1E8F\xFF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF" },
            { base: 'z', chars: "\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763" }
        ];
        let /** @type {?} */ diacriticsMap = {};
        for (let /** @type {?} */ i = 0; i < replacementList.length; i += 1) {
            let /** @type {?} */ chars = replacementList[i].chars;
            for (let /** @type {?} */ j = 0; j < chars.length; j += 1) {
                diacriticsMap[chars[j]] = replacementList[i].base;
            }
        }
        return input.replace(/[^\u0000-\u007e]/g, (c) => diacriticsMap[c] || c);
    }
}
LatinizePipe.decorators = [
    { type: Pipe, args: [{ name: 'latinize' },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class WrapPipe {
    /**
     * @param {?} input
     * @param {?} wrap
     * @param {?=} ends
     * @return {?}
     */
    transform(input, wrap, ends) {
        return (isString(input) && !isUndefined(wrap)) ? [wrap, input, ends || wrap].join('') : input;
    }
}
WrapPipe.decorators = [
    { type: Pipe, args: [{
                name: 'wrap'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class WithPipe {
    /**
     * @param {?} input
     * @param {?=} start
     * @param {?=} ends
     * @param {?=} csensitive
     * @return {?}
     */
    transform(input, start = null, ends = null, csensitive = false) {
        if (!isString(input) || (isNull(start) && isNull(ends)) || (start == '') || (ends == '')) {
            return input;
        }
        input = (csensitive) ? input : input.toLowerCase();
        if (!isNull(start) && !isNull(ends)) {
            let /** @type {?} */ a = !input.indexOf((csensitive) ? start : start.toLowerCase());
            let /** @type {?} */ b = input.indexOf((csensitive) ? ends : ends.toLowerCase(), (input.length - ends.length)) !== -1;
            if (a == true && b == true) {
                return true;
            }
            else {
                return false;
            }
        }
        if (!isNull(start)) {
            return !input.indexOf((csensitive) ? start : start.toLowerCase());
        }
        if (!isNull(ends)) {
            let /** @type {?} */ position = input.length - ends.length;
            return input.indexOf((csensitive) ? ends : ends.toLowerCase(), position) !== -1;
        }
    }
}
WithPipe.decorators = [
    { type: Pipe, args: [{ name: 'with' },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ReverseStrPipe {
    /**
     * @param {?} input
     * @return {?}
     */
    transform(input) {
        if (!isString(input)) {
            return input;
        }
        return Array.from(input).reverse().join('');
    }
}
ReverseStrPipe.decorators = [
    { type: Pipe, args: [{
                name: 'reverseStr'
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgStringPipesModule {
}
NgStringPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    LeftPadPipe,
                    MatchPipe,
                    PadPipe,
                    ReplacePipe,
                    RightPadPipe,
                    SplitPipe,
                    TestPipe,
                    TrimPipe,
                    NewlinesPipe,
                    CapitalizePipe,
                    UpperFirstPipe,
                    TemplatePipe,
                    EncodeURIPipe,
                    EncodeURIComponentPipe,
                    DecodeURIPipe,
                    DecodeURIComponentPipe,
                    TruncatePipe,
                    RepeatPipe,
                    SlugifyPipe,
                    StripTagsPipe,
                    LatinizePipe,
                    WrapPipe,
                    WithPipe,
                    ReverseStrPipe
                ],
                exports: [
                    LeftPadPipe,
                    MatchPipe,
                    PadPipe,
                    ReplacePipe,
                    RightPadPipe,
                    SplitPipe,
                    TestPipe,
                    TrimPipe,
                    NewlinesPipe,
                    CapitalizePipe,
                    UpperFirstPipe,
                    TemplatePipe,
                    EncodeURIPipe,
                    EncodeURIComponentPipe,
                    DecodeURIPipe,
                    DecodeURIComponentPipe,
                    TruncatePipe,
                    RepeatPipe,
                    SlugifyPipe,
                    StripTagsPipe,
                    LatinizePipe,
                    WrapPipe,
                    WithPipe,
                    ReverseStrPipe
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgPipesModule {
}
NgPipesModule.decorators = [
    { type: NgModule, args: [{
                exports: [
                    NgArrayPipesModule,
                    NgMathPipesModule,
                    NgBooleanPipesModule,
                    NgStringPipesModule,
                    NgObjectPipesModule,
                    NgAggregatePipesModule
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { NgAggregatePipesModule, NgArrayPipesModule, NgBooleanPipesModule, NgMathPipesModule, NgObjectPipesModule, NgStringPipesModule, NgPipesModule, GroupByPipe, MaxPipe, MeanPipe, MinPipe, SumPipe, EmptyPipe, HeadPipe, InitialPipe, LastPipe, JoinPipe, TailPipe, UniqPipe, WithoutPipe, MapPipe, WherePipe, FirstOrDefaultPipe, RangePipe, PluckPipe, ReversePipe, OrderByPipe, CountPipe, SomePipe, EveryPipe, ShufflePipe, TakePipe, DropPipe, DeepPipe, ChunkPipe, FlattenPipe, IntersectionPipe, UnionPipe, TakeWhilePipe, TakeUntilPipe, IsEqualPipe, IsGreaterOrEqualPipe, IsGreaterPipe, IsLessOrEqualPipe, IsIdenticalPipe, IsLessPipe, IsNotEqualPipe, IsNotIdenticalPipe, IsArrayPipe, IsDefinedPipe, IsFunctionPipe, IsNilPipe, IsNullPipe, IsNumberPipe, IsObjectPipe, IsStringPipe, IsUndefinedPipe, BytesPipe, CeilPipe, FloorPipe, RoundPipe, DegreesPipe, RadiansPipe, RandomPipe, SqrtPipe, PowPipe, AbsPipe, KeysPipe, ToArrayPipe, DefaultsPipe, LeftPadPipe, MatchPipe, PadPipe, ReplacePipe, RightPadPipe, SplitPipe, TestPipe, TrimPipe, NewlinesPipe, CapitalizePipe, UpperFirstPipe, TemplatePipe, EncodeURIPipe, EncodeURIComponentPipe, DecodeURIPipe, DecodeURIComponentPipe, TruncatePipe, RepeatPipe, SlugifyPipe, StripTagsPipe, LatinizePipe, WrapPipe, WithPipe, ReverseStrPipe };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,