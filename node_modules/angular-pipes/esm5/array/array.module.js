/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule } from '@angular/core';
import { EmptyPipe } from './empty.pipe';
import { HeadPipe } from './head.pipe';
import { InitialPipe } from './initial.pipe';
import { LastPipe } from './last.pipe';
import { JoinPipe } from './join.pipe';
import { TailPipe } from './tail.pipe';
import { UniqPipe } from './uniq.pipe';
import { WithoutPipe } from './without.pipe';
import { MapPipe } from './map.pipe';
import { WherePipe } from './where.pipe';
import { FirstOrDefaultPipe } from './first-or-default.pipe';
import { RangePipe } from './range.pipe';
import { PluckPipe } from './pluck.pipe';
import { ReversePipe } from './reverse.pipe';
import { OrderByPipe } from './order-by.pipe';
import { CountPipe } from './count.pipe';
import { SomePipe } from './some.pipe';
import { EveryPipe } from './every.pipe';
import { ShufflePipe } from './shuffle.pipe';
import { TakePipe } from './take.pipe';
import { DropPipe } from './drop.pipe';
import { DeepPipe } from './deep.pipe';
import { ChunkPipe } from './chunk.pipe';
import { FlattenPipe } from './flatten.pipe';
import { IntersectionPipe } from './intersection.pipe';
import { UnionPipe } from './union.pipe';
import { TakeWhilePipe } from './take-while.pipe';
import { TakeUntilPipe } from './take-until.pipe';
var NgArrayPipesModule = /** @class */ (function () {
    function NgArrayPipesModule() {
    }
    NgArrayPipesModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        EmptyPipe,
                        HeadPipe,
                        InitialPipe,
                        LastPipe,
                        JoinPipe,
                        TailPipe,
                        UniqPipe,
                        WithoutPipe,
                        MapPipe,
                        WherePipe,
                        RangePipe,
                        PluckPipe,
                        ReversePipe,
                        OrderByPipe,
                        CountPipe,
                        SomePipe,
                        EveryPipe,
                        ShufflePipe,
                        TakePipe,
                        DropPipe,
                        DeepPipe,
                        ChunkPipe,
                        FlattenPipe,
                        FirstOrDefaultPipe,
                        IntersectionPipe,
                        UnionPipe,
                        TakeWhilePipe,
                        TakeUntilPipe
                    ],
                    exports: [
                        EmptyPipe,
                        HeadPipe,
                        InitialPipe,
                        LastPipe,
                        JoinPipe,
                        TailPipe,
                        UniqPipe,
                        WithoutPipe,
                        MapPipe,
                        WherePipe,
                        RangePipe,
                        PluckPipe,
                        ReversePipe,
                        OrderByPipe,
                        CountPipe,
                        SomePipe,
                        EveryPipe,
                        ShufflePipe,
                        TakePipe,
                        DropPipe,
                        DeepPipe,
                        ChunkPipe,
                        FlattenPipe,
                        FirstOrDefaultPipe,
                        IntersectionPipe,
                        UnionPipe,
                        TakeWhilePipe,
                        TakeUntilPipe
                    ]
                },] },
    ];
    return NgArrayPipesModule;
}());
export { NgArrayPipesModule };
function NgArrayPipesModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NgArrayPipesModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NgArrayPipesModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXkubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1waXBlcy8iLCJzb3VyY2VzIjpbImFycmF5L2FycmF5Lm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN2QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDckMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN2QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDOzs7OztnQkFHakQsUUFBUSxTQUFDO29CQUNSLFlBQVksRUFBRTt3QkFDWixTQUFTO3dCQUNULFFBQVE7d0JBQ1IsV0FBVzt3QkFDWCxRQUFRO3dCQUNSLFFBQVE7d0JBQ1IsUUFBUTt3QkFDUixRQUFRO3dCQUNSLFdBQVc7d0JBQ1gsT0FBTzt3QkFDUCxTQUFTO3dCQUNULFNBQVM7d0JBQ1QsU0FBUzt3QkFDVCxXQUFXO3dCQUNYLFdBQVc7d0JBQ1gsU0FBUzt3QkFDVCxRQUFRO3dCQUNSLFNBQVM7d0JBQ1QsV0FBVzt3QkFDWCxRQUFRO3dCQUNSLFFBQVE7d0JBQ1IsUUFBUTt3QkFDUixTQUFTO3dCQUNULFdBQVc7d0JBQ1gsa0JBQWtCO3dCQUNsQixnQkFBZ0I7d0JBQ2hCLFNBQVM7d0JBQ1QsYUFBYTt3QkFDYixhQUFhO3FCQUNkO29CQUNELE9BQU8sRUFBRTt3QkFDUCxTQUFTO3dCQUNULFFBQVE7d0JBQ1IsV0FBVzt3QkFDWCxRQUFRO3dCQUNSLFFBQVE7d0JBQ1IsUUFBUTt3QkFDUixRQUFRO3dCQUNSLFdBQVc7d0JBQ1gsT0FBTzt3QkFDUCxTQUFTO3dCQUNULFNBQVM7d0JBQ1QsU0FBUzt3QkFDVCxXQUFXO3dCQUNYLFdBQVc7d0JBQ1gsU0FBUzt3QkFDVCxRQUFRO3dCQUNSLFNBQVM7d0JBQ1QsV0FBVzt3QkFDWCxRQUFRO3dCQUNSLFFBQVE7d0JBQ1IsUUFBUTt3QkFDUixTQUFTO3dCQUNULFdBQVc7d0JBQ1gsa0JBQWtCO3dCQUNsQixnQkFBZ0I7d0JBQ2hCLFNBQVM7d0JBQ1QsYUFBYTt3QkFDYixhQUFhO3FCQUNkO2lCQUNGOzs2QkE3RkQ7O1NBOEZhLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBFbXB0eVBpcGUgfSBmcm9tICcuL2VtcHR5LnBpcGUnO1xyXG5pbXBvcnQgeyBIZWFkUGlwZSB9IGZyb20gJy4vaGVhZC5waXBlJztcclxuaW1wb3J0IHsgSW5pdGlhbFBpcGUgfSBmcm9tICcuL2luaXRpYWwucGlwZSc7XHJcbmltcG9ydCB7IExhc3RQaXBlIH0gZnJvbSAnLi9sYXN0LnBpcGUnO1xyXG5pbXBvcnQgeyBKb2luUGlwZSB9IGZyb20gJy4vam9pbi5waXBlJztcclxuaW1wb3J0IHsgVGFpbFBpcGUgfSBmcm9tICcuL3RhaWwucGlwZSc7XHJcbmltcG9ydCB7IFVuaXFQaXBlIH0gZnJvbSAnLi91bmlxLnBpcGUnO1xyXG5pbXBvcnQgeyBXaXRob3V0UGlwZSB9IGZyb20gJy4vd2l0aG91dC5waXBlJztcclxuaW1wb3J0IHsgTWFwUGlwZSB9IGZyb20gJy4vbWFwLnBpcGUnO1xyXG5pbXBvcnQgeyBXaGVyZVBpcGUgfSBmcm9tICcuL3doZXJlLnBpcGUnO1xyXG5pbXBvcnQgeyBGaXJzdE9yRGVmYXVsdFBpcGUgfSBmcm9tICcuL2ZpcnN0LW9yLWRlZmF1bHQucGlwZSc7XHJcbmltcG9ydCB7IFJhbmdlUGlwZSB9IGZyb20gJy4vcmFuZ2UucGlwZSc7XHJcbmltcG9ydCB7IFBsdWNrUGlwZSB9IGZyb20gJy4vcGx1Y2sucGlwZSc7XHJcbmltcG9ydCB7IFJldmVyc2VQaXBlIH0gZnJvbSAnLi9yZXZlcnNlLnBpcGUnO1xyXG5pbXBvcnQgeyBPcmRlckJ5UGlwZSB9IGZyb20gJy4vb3JkZXItYnkucGlwZSc7XHJcbmltcG9ydCB7IENvdW50UGlwZSB9IGZyb20gJy4vY291bnQucGlwZSc7XHJcbmltcG9ydCB7IFNvbWVQaXBlIH0gZnJvbSAnLi9zb21lLnBpcGUnO1xyXG5pbXBvcnQgeyBFdmVyeVBpcGUgfSBmcm9tICcuL2V2ZXJ5LnBpcGUnO1xyXG5pbXBvcnQgeyBTaHVmZmxlUGlwZSB9IGZyb20gJy4vc2h1ZmZsZS5waXBlJztcclxuaW1wb3J0IHsgVGFrZVBpcGUgfSBmcm9tICcuL3Rha2UucGlwZSc7XHJcbmltcG9ydCB7IERyb3BQaXBlIH0gZnJvbSAnLi9kcm9wLnBpcGUnO1xyXG5pbXBvcnQgeyBEZWVwUGlwZSB9IGZyb20gJy4vZGVlcC5waXBlJztcclxuaW1wb3J0IHsgQ2h1bmtQaXBlIH0gZnJvbSAnLi9jaHVuay5waXBlJztcclxuaW1wb3J0IHsgRmxhdHRlblBpcGUgfSBmcm9tICcuL2ZsYXR0ZW4ucGlwZSc7XHJcbmltcG9ydCB7IEludGVyc2VjdGlvblBpcGUgfSBmcm9tICcuL2ludGVyc2VjdGlvbi5waXBlJztcclxuaW1wb3J0IHsgVW5pb25QaXBlIH0gZnJvbSAnLi91bmlvbi5waXBlJztcclxuaW1wb3J0IHsgVGFrZVdoaWxlUGlwZSB9IGZyb20gJy4vdGFrZS13aGlsZS5waXBlJztcclxuaW1wb3J0IHsgVGFrZVVudGlsUGlwZSB9IGZyb20gJy4vdGFrZS11bnRpbC5waXBlJztcclxuXHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW1xyXG4gICAgRW1wdHlQaXBlLFxyXG4gICAgSGVhZFBpcGUsXHJcbiAgICBJbml0aWFsUGlwZSxcclxuICAgIExhc3RQaXBlLFxyXG4gICAgSm9pblBpcGUsXHJcbiAgICBUYWlsUGlwZSxcclxuICAgIFVuaXFQaXBlLFxyXG4gICAgV2l0aG91dFBpcGUsXHJcbiAgICBNYXBQaXBlLFxyXG4gICAgV2hlcmVQaXBlLFxyXG4gICAgUmFuZ2VQaXBlLFxyXG4gICAgUGx1Y2tQaXBlLFxyXG4gICAgUmV2ZXJzZVBpcGUsXHJcbiAgICBPcmRlckJ5UGlwZSxcclxuICAgIENvdW50UGlwZSxcclxuICAgIFNvbWVQaXBlLFxyXG4gICAgRXZlcnlQaXBlLFxyXG4gICAgU2h1ZmZsZVBpcGUsXHJcbiAgICBUYWtlUGlwZSxcclxuICAgIERyb3BQaXBlLFxyXG4gICAgRGVlcFBpcGUsXHJcbiAgICBDaHVua1BpcGUsXHJcbiAgICBGbGF0dGVuUGlwZSxcclxuICAgIEZpcnN0T3JEZWZhdWx0UGlwZSxcclxuICAgIEludGVyc2VjdGlvblBpcGUsXHJcbiAgICBVbmlvblBpcGUsXHJcbiAgICBUYWtlV2hpbGVQaXBlLFxyXG4gICAgVGFrZVVudGlsUGlwZVxyXG4gIF0sXHJcbiAgZXhwb3J0czogW1xyXG4gICAgRW1wdHlQaXBlLFxyXG4gICAgSGVhZFBpcGUsXHJcbiAgICBJbml0aWFsUGlwZSxcclxuICAgIExhc3RQaXBlLFxyXG4gICAgSm9pblBpcGUsXHJcbiAgICBUYWlsUGlwZSxcclxuICAgIFVuaXFQaXBlLFxyXG4gICAgV2l0aG91dFBpcGUsXHJcbiAgICBNYXBQaXBlLFxyXG4gICAgV2hlcmVQaXBlLFxyXG4gICAgUmFuZ2VQaXBlLFxyXG4gICAgUGx1Y2tQaXBlLFxyXG4gICAgUmV2ZXJzZVBpcGUsXHJcbiAgICBPcmRlckJ5UGlwZSxcclxuICAgIENvdW50UGlwZSxcclxuICAgIFNvbWVQaXBlLFxyXG4gICAgRXZlcnlQaXBlLFxyXG4gICAgU2h1ZmZsZVBpcGUsXHJcbiAgICBUYWtlUGlwZSxcclxuICAgIERyb3BQaXBlLFxyXG4gICAgRGVlcFBpcGUsXHJcbiAgICBDaHVua1BpcGUsXHJcbiAgICBGbGF0dGVuUGlwZSxcclxuICAgIEZpcnN0T3JEZWZhdWx0UGlwZSxcclxuICAgIEludGVyc2VjdGlvblBpcGUsXHJcbiAgICBVbmlvblBpcGUsXHJcbiAgICBUYWtlV2hpbGVQaXBlLFxyXG4gICAgVGFrZVVudGlsUGlwZVxyXG4gIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIE5nQXJyYXlQaXBlc01vZHVsZSB7fVxyXG4iXX0=