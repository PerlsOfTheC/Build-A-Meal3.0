/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule } from '@angular/core';
import { BytesPipe } from './bytes.pipe';
import { CeilPipe } from './ceil.pipe';
import { FloorPipe } from './floor.pipe';
import { RoundPipe } from './round.pipe';
import { DegreesPipe } from './degrees.pipe';
import { RadiansPipe } from './radians.pipe';
import { RandomPipe } from './random.pipe';
import { SqrtPipe } from './sqrt.pipe';
import { PowPipe } from './pow.pipe';
import { AbsPipe } from './abs.pipe';
export class NgMathPipesModule {
}
NgMathPipesModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    BytesPipe,
                    CeilPipe,
                    FloorPipe,
                    RoundPipe,
                    DegreesPipe,
                    RadiansPipe,
                    RandomPipe,
                    SqrtPipe,
                    PowPipe,
                    AbsPipe
                ],
                exports: [
                    BytesPipe,
                    CeilPipe,
                    FloorPipe,
                    RoundPipe,
                    DegreesPipe,
                    RadiansPipe,
                    RandomPipe,
                    SqrtPipe,
                    PowPipe,
                    AbsPipe
                ]
            },] },
];
function NgMathPipesModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NgMathPipesModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NgMathPipesModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0aC5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXBpcGVzLyIsInNvdXJjZXMiOlsibWF0aC9tYXRoLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN6QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDckMsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQTRCckMsTUFBTTs7O1lBMUJMLFFBQVEsU0FBQztnQkFDUixZQUFZLEVBQUU7b0JBQ1osU0FBUztvQkFDVCxRQUFRO29CQUNSLFNBQVM7b0JBQ1QsU0FBUztvQkFDVCxXQUFXO29CQUNYLFdBQVc7b0JBQ1gsVUFBVTtvQkFDVixRQUFRO29CQUNSLE9BQU87b0JBQ1YsT0FBTztpQkFDTDtnQkFDRCxPQUFPLEVBQUU7b0JBQ1AsU0FBUztvQkFDVCxRQUFRO29CQUNSLFNBQVM7b0JBQ1QsU0FBUztvQkFDVCxXQUFXO29CQUNYLFdBQVc7b0JBQ1gsVUFBVTtvQkFDVixRQUFRO29CQUNSLE9BQU87b0JBQ1YsT0FBTztpQkFDTDthQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IEJ5dGVzUGlwZSB9IGZyb20gJy4vYnl0ZXMucGlwZSc7XHJcbmltcG9ydCB7IENlaWxQaXBlIH0gZnJvbSAnLi9jZWlsLnBpcGUnO1xyXG5pbXBvcnQgeyBGbG9vclBpcGUgfSBmcm9tICcuL2Zsb29yLnBpcGUnO1xyXG5pbXBvcnQgeyBSb3VuZFBpcGUgfSBmcm9tICcuL3JvdW5kLnBpcGUnO1xyXG5pbXBvcnQgeyBEZWdyZWVzUGlwZSB9IGZyb20gJy4vZGVncmVlcy5waXBlJztcclxuaW1wb3J0IHsgUmFkaWFuc1BpcGUgfSBmcm9tICcuL3JhZGlhbnMucGlwZSc7XHJcbmltcG9ydCB7IFJhbmRvbVBpcGUgfSBmcm9tICcuL3JhbmRvbS5waXBlJztcclxuaW1wb3J0IHsgU3FydFBpcGUgfSBmcm9tICcuL3NxcnQucGlwZSc7XHJcbmltcG9ydCB7IFBvd1BpcGUgfSBmcm9tICcuL3Bvdy5waXBlJztcclxuaW1wb3J0IHsgQWJzUGlwZSB9IGZyb20gJy4vYWJzLnBpcGUnO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtcclxuICAgIEJ5dGVzUGlwZSxcclxuICAgIENlaWxQaXBlLFxyXG4gICAgRmxvb3JQaXBlLFxyXG4gICAgUm91bmRQaXBlLFxyXG4gICAgRGVncmVlc1BpcGUsXHJcbiAgICBSYWRpYW5zUGlwZSxcclxuICAgIFJhbmRvbVBpcGUsXHJcbiAgICBTcXJ0UGlwZSxcclxuICAgIFBvd1BpcGUsXHJcblx0QWJzUGlwZVxyXG4gIF0sXHJcbiAgZXhwb3J0czogW1xyXG4gICAgQnl0ZXNQaXBlLFxyXG4gICAgQ2VpbFBpcGUsXHJcbiAgICBGbG9vclBpcGUsXHJcbiAgICBSb3VuZFBpcGUsXHJcbiAgICBEZWdyZWVzUGlwZSxcclxuICAgIFJhZGlhbnNQaXBlLFxyXG4gICAgUmFuZG9tUGlwZSxcclxuICAgIFNxcnRQaXBlLFxyXG4gICAgUG93UGlwZSxcclxuXHRBYnNQaXBlXHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmdNYXRoUGlwZXNNb2R1bGUge31cclxuIl19